<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch64" is_register="False" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>IC IALLUIS</reg_short_name>
      <reg_long_name>Instruction Cache Invalidate All to PoU, Inner Shareable</reg_long_name>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-icialluis.xml">ICIALLUIS</mapped_name>
            <mapped_type>Functional</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>


          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Invalidate all instruction caches in Inner Shareable domain to Point of Unification.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>Cache maintenance instructions</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          
    
      <attributes_text>
        <para>IC IALLUIS is a 64-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="IC_SYS IALLUIS">
        <encoding>
          
          <access_instruction>IC IALLUIS{, &lt;Xt&gt;}</access_instruction>
            
            <enc n="op0" v="0b01"/>
            
            <enc n="op1" v="0b000"/>
            
            <enc n="CRn" v="0b0111"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="op2" v="0b000"/>
            
            <enc n="Rt" v="0b11111"/>
        </encoding>
          <access_permission>
            <ps name="IC_SYS" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TPU == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TICAB == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HFGITR_EL2.ICIALLUIS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        IC_IALLUIS();
elsif PSTATE.EL == EL2 then
    IC_IALLUIS();
elsif PSTATE.EL == EL3 then
    IC_IALLUIS();
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>