<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>PMEVCNTR&lt;n&gt;</reg_short_name>
      <reg_long_name>Performance Monitors Event Count Registers</reg_long_name>
        <reg_condition otherwise="UNDEFINED">when AArch32 is supported at any Exception level and PMUv3 is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>30</reg_array_end>
         </reg_array>
      

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="ext-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>External</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds event counter n, which counts events, where n is 0 to 30.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMEVCNTR&lt;n&gt; is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="None_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
           <field_shortdesc>Event counter n</field_shortdesc>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Event counter n. Value of event counter n, where n is the number of this register and is a number from 0 to 30.</para>
<para>If <xref browsertext="ARMv8.5-PMU" filename="A_armv8_architecture_extension.fm" linkend="ARMv8.5.PMU"></xref> is implemented, the event counter is 64 bits and only the least-significant part of the event counter is accessible in AArch32 state:</para>
<list type="unordered">
<listitem><content>
<para>Reads from PMEVCNTR&lt;n&gt; return bits [31:0] of the counter.</para>
</content>
</listitem><listitem><content>
<para>Writes to PMEVCNTR&lt;n&gt; update bits [31:0] and leave bits [63:32] unchanged.</para>
</content>
</listitem><listitem><content>
<para>There is no means to access bits [63:32] directly from AArch32 state.</para>
</content>
</listitem><listitem><content>
<para>If the implementation does not support AArch64 at any Exception level, bits [63:32] are not required to be implemented.</para>
</content>
</listitem></list>
<para>If <xref browsertext="ARMv8.5-PMU" filename="A_armv8_architecture_extension.fm" linkend="ARMv8.5.PMU"></xref> is not implemented, the event counter is 32 bits.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="None_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="30"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>PMEVCNTR&lt;n&gt; can also be accessed by using <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link> with <register_link state="AArch32" id="AArch32-pmselr.xml">PMSELR</register_link>.SEL set to the value of &lt;n&gt;.</para>

      </access_permission_text>
      <access_permission_text>
        <para>If <xref browsertext="ARMv8.6-FGT" filename="A_armv8_architecture_extensions.fm" linkend="ARMv8.6.FGT"/> is implemented and &lt;n&gt; is greater than or equal to the number of accessible counters, then the behavior of permitted reads and writes of <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link> is as follows:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>If &lt;n&gt; is an unimplemented event counter, the access is <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>Otherwise, the access is trapped to EL2.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>If <xref browsertext="ARMv8.6-FGT" filename="A_armv8_architecture_extensions.fm" linkend="ARMv8.6.FGT"/> is not implemented and &lt;n&gt; is greater than or equal to the number of accessible counters, then reads and writes of <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link> are <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and the following behaviors are permitted:</para>

      </access_permission_text>
      <access_permission_text>
        <para>If &lt;n&gt; is greater than or equal to the number of accessible counters, then reads and writes of PMEVCNTR&lt;n&gt; are <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and the following behaviors are permitted:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>Accesses to the register are <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>Accesses to the register behave as RAZ/WI.</content>
</listitem><listitem><content>Accesses to the register execute as a NOP</content>
</listitem><listitem><content>If EL2 is implemented and enabled in the current Security state, and &lt;n&gt; is less than the number of implemented counters, accesses from EL1 or permitted accesses from EL0 are trapped to EL2.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <note><para>In EL0, an access is permitted if it is enabled by <register_link state="AArch32" id="AArch32-pmuserenr.xml">PMUSERENR</register_link>.{ER,EN} or <register_link state="AArch64" id="AArch64-pmuserenr_el0.xml">PMUSERENR_EL0</register_link>.{ER,EN}.</para><para>If EL2 is implemented and enabled in the current Security state, at EL0 and EL1:</para><list type="unordered"><listitem><content>If EL2 is using AArch32, <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN identifies the number of accessible counters.</content></listitem><listitem><content>If EL2 is using AArch64, <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN identifies the number of accessible counters.</content></listitem></list><para>Otherwise, the number of accessible counters is the number of implemented counters. See <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN for more details.</para></note>
      </access_permission_text>


      <access_mechanism accessor="MRC PMEVCNTR&lt;n&gt;">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b1110"/>
            
            <enc n="CRm" v="0b10:n[4:3]"/>
            
            <enc n="opc2" v="n[2:0]"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if !ELUsingAArch32(EL1) &amp;&amp; PMUSERENR_EL0.&lt;ER,EN&gt; == '00' then
        if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.AArch32SystemAccessTrap(EL2, 0x03);
        else
            AArch64.AArch32SystemAccessTrap(EL1, 0x03);
    elsif ELUsingAArch32(EL1) &amp;&amp; PMUSERENR.&lt;ER,EN&gt; == '00' then
        if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.AArch32SystemAccessTrap(EL2, 0x03);
        elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.TGE == '1' then
            AArch32.TakeHypTrapException(0x00);
        else
            UNDEFINED;
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL1) &amp;&amp; HCR_EL2.&lt;E2H,TGE&gt; != '11' &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMEVCNTRn_EL0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.TPM == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        return PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)];
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.TPM == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        return PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        return PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)];
elsif PSTATE.EL == EL3 then
    return PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR PMEVCNTR&lt;n&gt;">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b1110"/>
            
            <enc n="CRm" v="0b10:n[4:3]"/>
            
            <enc n="opc2" v="n[2:0]"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    if !ELUsingAArch32(EL1) &amp;&amp; PMUSERENR_EL0.EN == '0' then
        if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.AArch32SystemAccessTrap(EL2, 0x03);
        else
            AArch64.AArch32SystemAccessTrap(EL1, 0x03);
    elsif ELUsingAArch32(EL1) &amp;&amp; PMUSERENR.EN == '0' then
        if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.AArch32SystemAccessTrap(EL2, 0x03);
        elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.TGE == '1' then
            AArch32.TakeHypTrapException(0x00);
        else
            UNDEFINED;
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL1) &amp;&amp; HCR_EL2.&lt;E2H,TGE&gt; != '11' &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGWTR_EL2.PMEVCNTRn_EL0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.TPM == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)] = R[t];
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.TPM == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)] = R[t];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    else
        PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)] = R[t];
elsif PSTATE.EL == EL3 then
    PMEVCNTR[UInt(CRm&lt;1:0&gt;:opc2&lt;2:0&gt;)] = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>