<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ERR&lt;n&gt;FR</reg_short_name>
      <reg_long_name>Error Record Feature Register</reg_long_name>
        <reg_condition otherwise="RES0">when error record &lt;n&gt; is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>65534</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>RAS</reg_component>
    <reg_offset><hexnumber>0x000</hexnumber> + 64n</reg_offset>
    <reg_instance>ERR&lt;n&gt;FR</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Defines whether &lt;n&gt; is the first record owned by a node:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>If &lt;n&gt; is the first error record owned by a node, then ERR&lt;n&gt;FR.ED != <binarynumber>0b00</binarynumber>.</content>
</listitem><listitem><content>If &lt;n&gt; is not the first error record owned by a node, then ERR&lt;n&gt;FR.ED == <binarynumber>0b00</binarynumber>.</content>
</listitem></list>

      </purpose_text>
      <purpose_text>
        <para>If &lt;n&gt; is the first record owned by the node, defines which of the common architecturally-defined features are implemented by the node and, of the implemented features, which are software programmable.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ERR&lt;n&gt;FR is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_condition>When ERR&lt;n&gt;FR.ED != 0b00</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="IMPLEMENTATION DEFINED_63_55_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>IMPLEMENTATION DEFINED</field_name>
          <field_msb>63</field_msb>
          <field_lsb>55</field_lsb>
           <field_range>63:55</field_range>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>I</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_63_55_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>55</field_lsb>
           <field_range>63:55</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="CE_54_53_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CE</field_name>
          <field_msb>54</field_msb>
          <field_lsb>53</field_lsb>
           <field_range>54:53</field_range>
          <field_description order="before">
          
  <para>Corrected Error recording. Describes the types of Corrected Error the node can record.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>The node does not record any type of Corrected Error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>The node can record transient or persistent Corrected Errors (Corrected Errors that are recorded as <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CE == <binarynumber>0b01</binarynumber> and <binarynumber>0b11</binarynumber>).</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>The node can record of a non-specific Corrected Error (a Corrected Error that is recorded as <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CE == <binarynumber>0b10</binarynumber>).</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>The node can record any type of Corrected Error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="CE_54_53_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CE</field_name>
          <field_msb>54</field_msb>
          <field_lsb>53</field_lsb>
           <field_range>54:53</field_range>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>C</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_54_53_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>54</field_msb>
          <field_lsb>53</field_lsb>
           <field_range>54:53</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="DE_52_52_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>DE</field_name>
          <field_msb>52</field_msb>
          <field_lsb>52</field_lsb>
          <field_description order="before">
          
  <para>Deferred Error recording. Describes whether the node can record this type of error.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The node does not record this type of error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The node can record this type of error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="DE_52_52_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>DE</field_name>
          <field_msb>52</field_msb>
          <field_lsb>52</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>D</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_52_52_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>52</field_msb>
          <field_lsb>52</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="UEO_51_51_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UEO</field_name>
          <field_msb>51</field_msb>
          <field_lsb>51</field_lsb>
          <field_description order="before">
          
  <para>Latent or Restartable Error recording. Describes whether the node can record this type of error.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The node does not record this type of error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The node can record this type of error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="UEO_51_51_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UEO</field_name>
          <field_msb>51</field_msb>
          <field_lsb>51</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_51_51_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>51</field_msb>
          <field_lsb>51</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="UER_50_50_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UER</field_name>
          <field_msb>50</field_msb>
          <field_lsb>50</field_lsb>
          <field_description order="before">
          
  <para>Signaled or Recoverable Error recording. Describes whether the node can record this type of error.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The node does not record this type of error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The node can record this type of error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="UER_50_50_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UER</field_name>
          <field_msb>50</field_msb>
          <field_lsb>50</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_50_50_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>50</field_msb>
          <field_lsb>50</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="UEU_49_49_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UEU</field_name>
          <field_msb>49</field_msb>
          <field_lsb>49</field_lsb>
          <field_description order="before">
          
  <para>Unrecoverable Error recording. Describes whether the node can record this type of error.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The node does not record this type of error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The node can record this type of error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="UEU_49_49_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UEU</field_name>
          <field_msb>49</field_msb>
          <field_lsb>49</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_49_49_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>49</field_msb>
          <field_lsb>49</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="UC_48_48_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UC</field_name>
          <field_msb>48</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
          
  <para>Uncontainable Error recording. Describes whether the node can record this type of error.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The node does not record this type of error.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The node can record this type of error.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b1</fields_condition>
      </field>
        <field
           id="UC_48_48_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>UC</field_name>
          <field_msb>48</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>U</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FRX == 0b0</fields_condition>
      </field>
        <field
           id="0_48_48_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>48</field_msb>
          <field_lsb>48</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="IMPLEMENTATION DEFINED_47_32"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>IMPLEMENTATION DEFINED</field_name>
          <field_msb>47</field_msb>
          <field_lsb>32</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  <para>Reserved for identifying <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> controls.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>I</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FRX_31_31"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FRX</field_name>
          <field_msb>31</field_msb>
          <field_lsb>31</field_lsb>
          <field_description order="before">
          
  <para>Feature Register extension. Defines whether ERR&lt;n&gt;FR[63:48] are architecturally defined.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>ERR&lt;n&gt;FR[63:48] are <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>ERR&lt;n&gt;FR[63:48] are defined by the architecture.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_30_26"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>30</field_msb>
          <field_lsb>26</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="TS_25_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>TS</field_name>
          <field_msb>25</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Timestamp Extension. Indicates whether, for each error record &lt;m&gt; owned by this node, <register_link id="ext-errnmisc3.xml" state="ext">ERR&lt;m&gt;MISC3</register_link> is used as the timestamp register, and, if it is, the timebase used by the timestamp.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>The node does not support a timestamp register.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>The node implements a timestamp register. The timestamp uses the same timebase as the system Generic Timer.</para>
<note><para>For an error record which has an affinity to a PE, this is the same timer that is visible through <register_link state="AArch64" id="AArch64-cntpct_el0.xml">CNTPCT_EL0</register_link> at the highest Exception level on that PE.</para></note>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>The node implements a timestamp register. The timebase for the timestamp is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CI_23_22"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CI</field_name>
          <field_msb>23</field_msb>
          <field_lsb>22</field_lsb>
          <field_description order="before">
          
  <para>Critical error interrupt. Indicates whether the critical error interrupt and associated controls are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the critical error interrupt. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.CI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Critical error interrupt is supported and always enabled. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.CI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Critical error interrupt is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.CI.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="INJ_21_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>INJ</field_name>
          <field_msb>21</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Fault Injection Extension. Indicates whether the RAS Common Fault Injection Model Extension is implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>The node does not support the RAS Common Fault Injection Model Extension.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>The node implements the RAS Common Fault Injection Model Extension. See <register_link state="ext" id="ext-errnpfgf.xml">ERR&lt;n&gt;PFGF</register_link> for more information.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CEO_19_18_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CEO</field_name>
          <field_msb>19</field_msb>
          <field_lsb>18</field_lsb>
           <field_range>19:18</field_range>
          <field_description order="before">
          
  <para>Corrected Error overwrite. Indicates the behavior when a second Corrected error is detected after a first Corrected error has been recorded by an error record &lt;m&gt; owned by the node.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Counts Corrected errors if a counter is implemented. Keeps the previous error syndrome. If the counter overflows, or no counter is implemented, then <register_link id="ext-errnstatus.xml" state="ext">ERR&lt;m&gt;STATUS</register_link>.OF is set to <binarynumber>0b1</binarynumber>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Counts Corrected errors. If <register_link id="ext-errnstatus.xml" state="ext">ERR&lt;m&gt;STATUS</register_link>.OF == <binarynumber>0b1</binarynumber> before the Corrected error is counted, then keeps the previous syndrome. Otherwise the previous syndrome is overwritten. If the counter overflows, then <register_link id="ext-errnstatus.xml" state="ext">ERR&lt;m&gt;STATUS</register_link>.OF is set to <binarynumber>0b1</binarynumber>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.CEC != 0b00</fields_condition>
      </field>
        <field
           id="0_19_18_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>19</field_msb>
          <field_lsb>18</field_lsb>
           <field_range>19:18</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="DUI_17_16_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>DUI</field_name>
          <field_msb>17</field_msb>
          <field_lsb>16</field_lsb>
           <field_range>17:16</field_range>
          <field_description order="before">
          
  <para>Error recovery interrupt for deferred errors control. Indicates whether the control for enabling error recovery interrupts on deferred errors are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the control for enabling error recovery interrupts on deferred errors. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.DUI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Control for enabling error recovery interrupts on deferred errors is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.DUI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Control for enabling error recovery interrupts on deferred errors is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.WDUI for writes and <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.RDUI for reads.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.UI != 0b00</fields_condition>
      </field>
        <field
           id="0_17_16_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>17</field_msb>
          <field_lsb>16</field_lsb>
           <field_range>17:16</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="RP_15_15_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>RP</field_name>
          <field_msb>15</field_msb>
          <field_lsb>15</field_lsb>
          <field_description order="before">
          
  <para>Repeat counter. Indicates whether the node implements the repeat Corrected error counter in <register_link id="ext-errnmisc0.xml" state="ext">ERR&lt;m&gt;MISC0</register_link> for each error record &lt;m&gt; owned by the node that implements the standard Corrected error counter.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>A single CE counter is implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>A first (repeat) counter and a second (other) counter are implemented. The repeat counter is the same size as the primary error counter.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.CEC != 0b00</fields_condition>
      </field>
        <field
           id="0_15_15_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>15</field_msb>
          <field_lsb>15</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="CEC_14_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CEC</field_name>
          <field_msb>14</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Corrected Error Counter. Indicates whether the node implements the standard Corrected error counter (CE counter) mechanisms in <register_link id="ext-errnmisc0.xml" state="ext">ERR&lt;m&gt;MISC0</register_link> for each error record &lt;m&gt; owned by the node that can record countable errors.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
  <para>Does not implement the standard Corrected error counter model.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
  <para>Implements an 8-bit Corrected error counter in <register_link id="ext-errnmisc0.xml" state="ext">ERR&lt;m&gt;MISC0</register_link>[39:32].</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
  <para>Implements a 16-bit Corrected error counter in <register_link id="ext-errnmisc0.xml" state="ext">ERR&lt;m&gt;MISC0</register_link>[47:32].</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<note><para>Implementations might include other error counter models, or might include the standard model and not indicate this in ERR&lt;n&gt;FR.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CFI_11_10_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CFI</field_name>
          <field_msb>11</field_msb>
          <field_lsb>10</field_lsb>
           <field_range>11:10</field_range>
          <field_description order="before">
          
  <para>Fault handling interrupt for corrected errors. Indicates whether the control for enabling fault handling interrupts on corrected errors are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the control for enabling fault handling interrupts on corrected errors. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.CFI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Control for enabling fault handling interrupts on corrected errors is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.CFI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Control for enabling fault handling interrupts on corrected errors is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.WCFI for writes and <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.RCFI for reads.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ERR&lt;n&gt;FR.FI != 0b00</fields_condition>
      </field>
        <field
           id="0_11_10_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>11</field_msb>
          <field_lsb>10</field_lsb>
           <field_range>11:10</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="UE_9_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>UE</field_name>
          <field_msb>9</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>In-band uncorrected error reporting. Indicates whether the in-band uncorrected error reporting (External Aborts) and associated controls are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the in-band uncorrected error reporting (External Aborts). <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UE is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>In-band uncorrected error reporting (External Aborts) is supported and always enabled. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UE is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>In-band uncorrected error reporting (External Aborts) is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UE.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>In-band uncorrected error reporting (External Aborts) is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.WUE for writes and <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.RUE for reads.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="FI_7_6"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FI</field_name>
          <field_msb>7</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
          
  <para>Fault handling interrupt. Indicates whether the fault handling interrupt and associated controls are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the fault handling interrupt. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.FI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Fault handling interrupt is supported and always enabled. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.FI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Fault handling interrupt is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.FI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Fault handling interrupt is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.WFI for writes and <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.RFI for reads.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="UI_5_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>UI</field_name>
          <field_msb>5</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Error recovery interrupt for uncorrected errors. Indicates whether the error handling interrupt and associated controls are implemented.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Does not support the error handling interrupt. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Error handling interrupt is supported and always enabled. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UI is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Error handling interrupt is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.UI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Error handling interrupt is supported and controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.WUI for writes and <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.RUI for reads.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="IMPLEMENTATION DEFINED_3_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>IMPLEMENTATION DEFINED</field_name>
          <field_msb>3</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
            <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
          
  

          </field_description>
            <field_values>
               
                 <field_value_name>I</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="ED_1_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ED</field_name>
          <field_msb>1</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Error reporting and logging. Indicates whether error record &lt;n&gt; is the first record owned the node, and, if so, whether it implements the controls for enabling and disabling error reporting and logging.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Error reporting and logging always enabled. <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.ED is <arm-defined-word>RES0</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Error reporting and logging is controllable using <register_link state="ext" id="ext-errnctlr.xml">ERR&lt;n&gt;CTLR</register_link>.ED.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="64">
      <fields_condition>When ERR&lt;n&gt;FR.ED == 0b00</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_63_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>63</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ED_1_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ED</field_name>
          <field_msb>1</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Error reporting and logging. Indicates error record &lt;n&gt; is not the first record owned the node.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Error record &lt;n&gt; is not the first record owned by the node.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This field reads as <binarynumber>0b00</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
        <fields_condition>When ERR&lt;n&gt;FR.ED != 0b00</fields_condition>
      
        <fieldat id="IMPLEMENTATION DEFINED_63_55_1" msb="63" lsb="55"/>
        <fieldat id="CE_54_53_1" msb="54" lsb="53"/>
        <fieldat id="DE_52_52_1" msb="52" lsb="52"/>
        <fieldat id="UEO_51_51_1" msb="51" lsb="51"/>
        <fieldat id="UER_50_50_1" msb="50" lsb="50"/>
        <fieldat id="UEU_49_49_1" msb="49" lsb="49"/>
        <fieldat id="UC_48_48_1" msb="48" lsb="48"/>
        <fieldat id="IMPLEMENTATION DEFINED_47_32" msb="47" lsb="32"/>
        <fieldat id="FRX_31_31" msb="31" lsb="31"/>
        <fieldat id="0_30_26" msb="30" lsb="26"/>
        <fieldat id="TS_25_24" msb="25" lsb="24"/>
        <fieldat id="CI_23_22" msb="23" lsb="22"/>
        <fieldat id="INJ_21_20" msb="21" lsb="20"/>
        <fieldat id="CEO_19_18_1" msb="19" lsb="18"/>
        <fieldat id="DUI_17_16_1" msb="17" lsb="16"/>
        <fieldat id="RP_15_15_1" msb="15" lsb="15"/>
        <fieldat id="CEC_14_12" msb="14" lsb="12"/>
        <fieldat id="CFI_11_10_1" msb="11" lsb="10"/>
        <fieldat id="UE_9_8" msb="9" lsb="8"/>
        <fieldat id="FI_7_6" msb="7" lsb="6"/>
        <fieldat id="UI_5_4" msb="5" lsb="4"/>
        <fieldat id="IMPLEMENTATION DEFINED_3_2" msb="3" lsb="2"/>
        <fieldat id="ED_1_0" msb="1" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="64">
        <fields_condition>When ERR&lt;n&gt;FR.ED == 0b00</fields_condition>
      
        <fieldat id="0_63_2" msb="63" lsb="2"/>
        <fieldat id="ED_1_0" msb="1" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="65534"/>
        </reg_variables>
      


<access_mechanisms>
  


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>