<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>DBGBCR&lt;n&gt;_EL1</reg_short_name>
      <reg_long_name>Debug Breakpoint Control Registers</reg_long_name>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>15</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>Debug</reg_component>
    <reg_offset><hexnumber>0x408</hexnumber> + 16n</reg_offset>
    <reg_instance>DBGBCR&lt;n&gt;_EL1</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-dbgbcrn_el1.xml">DBGBCR&lt;n&gt;_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-dbgbcrn.xml">DBGBCR&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds control information for a breakpoint. Forms breakpoint n together with value register <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If breakpoint n is not implemented then accesses to this register are:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content><arm-defined-word>RES0</arm-defined-word> when IsCorePowered() &amp;&amp; !DoubleLockStatus() &amp;&amp; !OSLockStatus() &amp;&amp; AllowExternalDebugAccess().</content>
</listitem><listitem><content>A <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> choice of <arm-defined-word>RES0</arm-defined-word> or ERROR otherwise.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>DBGBCR&lt;n&gt;_EL1 is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  <para>When the E field is zero, all the other fields in the register are ignored.</para>

    </text_before_fields>
    
        <field
           id="0_31_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="BT_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>BT</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Breakpoint Type. Possible values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Unlinked instruction address match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link> is the address of an instruction.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>As <binarynumber>0b0000</binarynumber> but linked to a Context matching breakpoint.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Unlinked Context ID match. When <xref browsertext="ARMv8.1-VHE" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.VHE"></xref> is implemented, EL2 is using AArch64, and the Effective value of <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.E2H is 1, if either the PE is executing at EL0 with <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE set to 1 or the PE is executing at EL2, then <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID must match the <register_link state="AArch64" id="AArch64-contextidr_el2.xml">CONTEXTIDR_EL2</register_link> value. Otherwise, <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID must match the <register_link state="AArch64" id="AArch64-contextidr_el1.xml">CONTEXTIDR_EL1</register_link> value.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>As <binarynumber>0b0010</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>Unlinked instruction address mismatch. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link> is the address of an instruction to be stepped.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>As <binarynumber>0b0100</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>Unlinked <register_link state="AArch64" id="AArch64-contextidr_el1.xml">CONTEXTIDR_EL1</register_link> match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID is a Context ID compared against <register_link state="AArch64" id="AArch64-contextidr_el1.xml">CONTEXTIDR_EL1</register_link>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>As <binarynumber>0b0110</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
  <para>Unlinked VMID match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.VMID is a VMID compared against <register_link state="AArch64" id="AArch64-vttbr_el2.xml">VTTBR_EL2</register_link>.VMID.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
  <para>As <binarynumber>0b1000</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1010</field_value>
        <field_value_description>
  <para>Unlinked VMID and Context ID match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID is a Context ID compared against <register_link state="AArch64" id="AArch64-contextidr_el1.xml">CONTEXTIDR_EL1</register_link>, and <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.VMID is a VMID compared against <register_link state="AArch64" id="AArch64-vttbr_el2.xml">VTTBR_EL2</register_link>.VMID.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1011</field_value>
        <field_value_description>
  <para>As <binarynumber>0b1010</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1100</field_value>
        <field_value_description>
  <para>Unlinked <register_link state="AArch64" id="AArch64-contextidr_el2.xml">CONTEXTIDR_EL2</register_link> match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID2 is a Context ID compared against <register_link state="AArch64" id="AArch64-contextidr_el2.xml">CONTEXTIDR_EL2</register_link>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1101</field_value>
        <field_value_description>
  <para>As <binarynumber>0b1100</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1110</field_value>
        <field_value_description>
  <para>Unlinked Full Context ID match. <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID is compared against <register_link state="AArch64" id="AArch64-contextidr_el1.xml">CONTEXTIDR_EL1</register_link>, and <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>.ContextID2 is compared against <register_link state="AArch64" id="AArch64-contextidr_el2.xml">CONTEXTIDR_EL2</register_link>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
  <para>As <binarynumber>0b1110</binarynumber>, with linking enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>Constraints on breakpoint programming mean some values are reserved under certain conditions.</para>
<para>For more information on the operation of the SSC, HMC, and PMC fields, and on the effect of programming this field to a reserved value, see <xref linkend="BCGCFEJJ" browsertext="'Execution conditions for which a breakpoint generates Breakpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/> and <xref linkend="CJADCAEE" browsertext="'Reserved DBGBCR&lt;n&gt;_EL1.BT values' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="LBN_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LBN</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Linked breakpoint number. For Linked address matching breakpoints, this specifies the index of the Context-matching breakpoint linked to.</para>
<para>For all other breakpoint types this field is ignored and reads of the register return an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
<para>This field is ignored when the value of DBGBCR&lt;n&gt;_EL1.E is 0.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="SSC_15_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SSC</field_name>
          <field_msb>15</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>Security state control. Determines the Security states under which a Breakpoint debug event for breakpoint n is generated. This field must be interpreted along with the HMC and PMC fields, and there are constraints on the permitted values of the {HMC, SSC, PMC} fields. For more information, including the effect of programming the fields to a reserved set of values, see <xref linkend="CJAGFIAA" browsertext="'Reserved DBGBCR&lt;n&gt;_EL1.{SSC, HMC, PMC} values' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>
<para>For more information on the operation of the SSC, HMC, and PMC fields, see <xref linkend="BCGCFEJJ" browsertext="'Execution conditions for which a breakpoint generates Breakpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="HMC_13_13"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>HMC</field_name>
          <field_msb>13</field_msb>
          <field_lsb>13</field_lsb>
          <field_description order="before">
          
  <para>Higher mode control. Determines the debug perspective for deciding when a Breakpoint debug event for breakpoint n is generated. This field must be interpreted along with the SSC and PMC fields, and there are constraints on the permitted values of the {HMC, SSC, PMC} fields. For more information see <register_link state="ext" id="ext-dbgbcrn_el1.xml">DBGBCR&lt;n&gt;_EL1</register_link>.SSC description.</para>
<para>For more information on the operation of the SSC, HMC, and PMC fields, see <xref linkend="BCGCFEJJ" browsertext="'Execution conditions for which a breakpoint generates Breakpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_12_9"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>12</field_msb>
          <field_lsb>9</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="BAS_8_5_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="True"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES1"
        >
          <field_name>BAS</field_name>
          <field_msb>8</field_msb>
          <field_lsb>5</field_lsb>
           <field_range>8:5</field_range>
          <field_description order="before">
          
  <para>Byte address select. Defines which half-words an address-matching breakpoint matches, regardless of the instruction set and Execution state.</para>
<para>The permitted values depend on the breakpoint type.</para>
<para>For Address match breakpoints in either AArch32 or AArch64 state, the permitted values are:</para>
<table><tgroup cols="3"><thead><row><entry>BAS</entry><entry>Match instruction at</entry><entry>Constraint for debuggers</entry></row></thead><tbody><row><entry><binarynumber>0b0011</binarynumber></entry><entry><register_link state="AArch64" id="AArch64-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link></entry><entry>Use for T32 instructions</entry></row><row><entry><binarynumber>0b1100</binarynumber></entry><entry><register_link state="AArch64" id="AArch64-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link> + 2</entry><entry>Use for T32 instructions</entry></row><row><entry><binarynumber>0b1111</binarynumber></entry><entry><register_link state="AArch64" id="AArch64-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link></entry><entry>Use for A64 and A32 instructions</entry></row></tbody></tgroup></table>
<para>All other values are reserved.</para>
<para>For more information, see <xref linkend="BGBJCDEC" browsertext="'Using the BAS field in Address Match breakpoints' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section G2 (AArch32 Self-hosted Debug)" filename="G_aarch32_self_hosted_debug.fm"/>.</para>
<para>For Address mismatch breakpoints in an AArch32 stage 1 translation regime, the permitted values are:</para>
<table><tgroup cols="3"><thead><row><entry>BAS</entry><entry>Match instruction at</entry><entry>Constraint for debuggers</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry>-</entry><entry>Use for a match anywhere breakpoint</entry></row><row><entry><binarynumber>0b0011</binarynumber></entry><entry><register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link></entry><entry>Use for stepping T32 instructions</entry></row><row><entry><binarynumber>0b1100</binarynumber></entry><entry><register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link> + 2</entry><entry>Use for stepping T32 instructions</entry></row><row><entry><binarynumber>0b1111</binarynumber></entry><entry><register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link></entry><entry>Use for stepping A64 and A32 instructions</entry></row></tbody></tgroup></table>
<para>For more information, see <xref linkend="BGBJCDEC" browsertext="'Using the BAS field in Address Match breakpoints' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section G2 (AArch32 Self-hosted Debug)" filename="G_aarch32_self_hosted_debug.fm"/>.</para>
<para>For Context matching breakpoints, this field is <arm-defined-word>RES1</arm-defined-word> and ignored.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
            
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
      </field>
        <field
           id="1_8_5_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES1"
        >
          <field_name>1</field_name>
          <field_msb>8</field_msb>
          <field_lsb>5</field_lsb>
           <field_range>8:5</field_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES1</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="0_4_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>4</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="PMC_2_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PMC</field_name>
          <field_msb>2</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Privilege mode control. Determines the Exception level or levels at which a Breakpoint debug event for breakpoint n is generated. This field must be interpreted along with the SSC and HMC fields, and there are constraints on the permitted values of the {HMC, SSC, PMC} fields. For more information see the <register_link state="ext" id="ext-dbgbcrn_el1.xml">DBGBCR&lt;n&gt;_EL1</register_link>.SSC description.</para>
<para>For more information on the operation of the SSC, HMC, and PMC fields, see <xref linkend="BCGCFEJJ" browsertext="'Execution conditions for which a breakpoint generates Breakpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="E_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>E</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Enable breakpoint <register_link state="ext" id="ext-dbgbvrn_el1.xml">DBGBVR&lt;n&gt;_EL1</register_link>. Possible values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Breakpoint disabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Breakpoint enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="0_31_24" msb="31" lsb="24"/>
        <fieldat id="BT_23_20" msb="23" lsb="20"/>
        <fieldat id="LBN_19_16" msb="19" lsb="16"/>
        <fieldat id="SSC_15_14" msb="15" lsb="14"/>
        <fieldat id="HMC_13_13" msb="13" lsb="13"/>
        <fieldat id="0_12_9" msb="12" lsb="9"/>
        <fieldat id="BAS_8_5_1" msb="8" lsb="5"/>
        <fieldat id="0_4_3" msb="4" lsb="3"/>
        <fieldat id="PMC_2_1" msb="2" lsb="1"/>
        <fieldat id="E_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="15"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalDebugAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>