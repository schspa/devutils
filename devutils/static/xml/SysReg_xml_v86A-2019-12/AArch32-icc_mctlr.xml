<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ICC_MCTLR</reg_short_name>
      <reg_long_name>Interrupt Controller Monitor Control Register</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</mapped_name>
            <mapped_type>Optional</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Controls aspects of the behavior of the GIC CPU interface and provides information about the features implemented.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>Security registers</reg_group>
            <reg_group>GIC system registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICC_MCTLR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_31_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ExtRange_19_19"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ExtRange</field_name>
          <field_msb>19</field_msb>
          <field_lsb>19</field_lsb>
          <field_description order="before">
          
  <para>Extended INTID range (read-only).</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>CPU interface does not support INTIDs in the range 1024..8191.</para>
<para>Behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word> if the IRI delivers an interrupt in the range 1024 to 8191 to the CPU interface.</para>
<note><para>Arm strongly recommends that the IRI is not configured to deliver interrupts in this range to a PE that does not support them.</para></note>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>CPU interface supports INTIDs in the range 1024..8191</para>
<para>All INTIDs in the range 1024..8191 are treated as requiring deactivation.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="RSS_18_18"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>RSS</field_name>
          <field_msb>18</field_msb>
          <field_lsb>18</field_lsb>
          <field_description order="before">
          
  <para>Range Selector Support. Possible values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Targeted SGIs with affinity level 0 values of 0 - 15 are supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Targeted SGIs with affinity level 0 values of 0 - 255 are supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is read-only.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="nDS_17_17"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>nDS</field_name>
          <field_msb>17</field_msb>
          <field_lsb>17</field_lsb>
          <field_description order="before">
          
  <para>Disable Security not supported. Read-only and writes are ignored.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The CPU interface logic supports disabling of security.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The CPU interface logic does not support disabling of security, and requires that security is not disabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_16_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>16</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="A3V_15_15"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>A3V</field_name>
          <field_msb>15</field_msb>
          <field_lsb>15</field_lsb>
          <field_description order="before">
          
  <para>Affinity 3 Valid. Read-only and writes are ignored.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The CPU interface logic does not support non-zero values of the Aff3 field in SGI generation System registers.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The CPU interface logic supports non-zero values of the Aff3 field in SGI generation System registers.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>.A3V is an alias of ICC_MCTLR.A3V</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SEIS_14_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SEIS</field_name>
          <field_msb>14</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>SEI Support. Read-only and writes are ignored. Indicates whether the CPU interface supports generation of SEIs.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The CPU interface logic does not support generation of SEIs.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The CPU interface logic supports generation of SEIs.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>.SEIS is an alias of ICC_MCTLR.SEIS</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="IDbits_13_11"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>IDbits</field_name>
          <field_msb>13</field_msb>
          <field_lsb>11</field_lsb>
          <field_description order="before">
          
  <para>Identifier bits. Read-only and writes are ignored. Indicates the number of physical interrupt identifier bits supported.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
  <para>16 bits.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
  <para>24 bits.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>.IDbits is an alias of ICC_MCTLR.IDbits</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="PRIbits_10_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PRIbits</field_name>
          <field_msb>10</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>Priority bits. Read-only and writes are ignored. The number of priority bits implemented, minus one.</para>
<para>An implementation that supports two Security states must implement at least 32 levels of physical priority (5 priority bits).</para>
<para>An implementation that supports only a single Security state must implement at least 16 levels of physical priority (4 priority bits).</para>
<note><para>This field always returns the number of priority bits implemented, regardless of the value of <xref linkend="CACIBCFJ" browsertext="SCR"/>.NS or the value of <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS.</para></note><para>The division between group priority and subpriority is defined in the binary point registers <register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> and <register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link>.</para>
<para>This field determines the minimum value of ICC_BPR0.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="0_7_7"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>7</field_msb>
          <field_lsb>7</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="PMHE_6_6"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="True"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PMHE</field_name>
          <field_msb>6</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
          
  <para>Priority Mask Hint Enable.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Disables use of the priority mask register as a hint for interrupt distribution.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Enables use of the priority mask register as a hint for interrupt distribution.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>Software must write <register_link state="AArch32" id="AArch32-icc_pmr.xml">ICC_PMR</register_link> to <hexnumber>0xFF</hexnumber> before clearing this field to 0.</para>
<para>An implementation might choose to make this field RAO/WI.</para>
<para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>.PMHE is an alias of ICC_MCTLR.PMHE.</para>

          </field_description>
            
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="RM_5_5"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>RM</field_name>
          <field_msb>5</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
          
  <para>SBZ.</para>
<para>The equivalent bit in AArch64 is the Routing Modifier bit. This feature is not supported when EL3 is using AArch32.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="EOImode_EL1NS_4_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>EOImode_EL1NS</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>EOI mode for interrupts handled at Non-secure EL1 and EL2. Controls whether a write to an End of Interrupt register also deactivates the interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide both priority drop and interrupt deactivation functionality. Accesses to <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide priority drop functionality only. <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> provides interrupt deactivation functionality.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>(NS).EOImode is an alias of ICC_MCTLR.EOImode_EL1NS.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="EOImode_EL1S_3_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>EOImode_EL1S</field_name>
          <field_msb>3</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
          
  <para>EOI mode for interrupts handled at Secure EL1. Controls whether a write to an End of Interrupt register also deactivates the interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide both priority drop and interrupt deactivation functionality. Accesses to <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide priority drop functionality only. <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> provides interrupt deactivation functionality.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>(S).EOImode is an alias of ICC_MCTLR.EOImode_EL1S.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="EOImode_EL3_2_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>EOImode_EL3</field_name>
          <field_msb>2</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
          
  <para>EOI mode for interrupts handled at EL3. Controls whether a write to an End of Interrupt register also deactivates the interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide both priority drop and interrupt deactivation functionality. Accesses to <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide priority drop functionality only. <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> provides interrupt deactivation functionality.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="CBPR_EL1NS_1_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CBPR_EL1NS</field_name>
          <field_msb>1</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Common Binary Point Register, EL1 Non-secure. Controls whether the same register is used for interrupt preemption of both Group 0 and Group 1 Non-secure interrupts at EL1 and EL2.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for Group 0 interrupts only.</para>
<para><register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link> determines the preemption group for Non-secure Group 1 interrupts.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for Group 0 interrupts and Non-secure Group 1 interrupts. Non-secure accesses to <register_link state="ext" id="ext-gicc_bpr.xml">GICC_BPR</register_link> and <register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link> access the state of <register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>(NS).CBPR is an alias of ICC_MCTLR.CBPR_EL1NS.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="CBPR_EL1S_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CBPR_EL1S</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Common Binary Point Register, EL1 Secure. Controls whether the same register is used for interrupt preemption of both Group 0 and Group 1 Secure interrupts in Secure non-Monitor modes.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for Group 0 interrupts only.</para>
<para><register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link> determines the preemption group for Secure Group 1 interrupts.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for Group 0 interrupts and Secure Group 1 interrupts. Secure EL1 accesses, or EL3 accesses when not in Monitor mode, to <register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link> access the state of <register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is present, <register_link state="AArch32" id="AArch32-icc_ctlr.xml">ICC_CTLR</register_link>(S).CBPR is an alias of ICC_MCTLR.CBPR_EL1S.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="0_31_20" msb="31" lsb="20"/>
        <fieldat id="ExtRange_19_19" msb="19" lsb="19"/>
        <fieldat id="RSS_18_18" msb="18" lsb="18"/>
        <fieldat id="nDS_17_17" msb="17" lsb="17"/>
        <fieldat id="0_16_16" msb="16" lsb="16"/>
        <fieldat id="A3V_15_15" msb="15" lsb="15"/>
        <fieldat id="SEIS_14_14" msb="14" lsb="14"/>
        <fieldat id="IDbits_13_11" msb="13" lsb="11"/>
        <fieldat id="PRIbits_10_8" msb="10" lsb="8"/>
        <fieldat id="0_7_7" msb="7" lsb="7"/>
        <fieldat id="PMHE_6_6" msb="6" lsb="6"/>
        <fieldat id="RM_5_5" msb="5" lsb="5"/>
        <fieldat id="EOImode_EL1NS_4_4" msb="4" lsb="4"/>
        <fieldat id="EOImode_EL1S_3_3" msb="3" lsb="3"/>
        <fieldat id="EOImode_EL3_2_2" msb="2" lsb="2"/>
        <fieldat id="CBPR_EL1NS_1_1" msb="1" lsb="1"/>
        <fieldat id="CBPR_EL1S_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>This register is only accessible when executing in Monitor mode.</para>
      </access_permission_text>


      <access_mechanism accessor="MRC ICC_MCTLR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b110"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1100"/>
            
            <enc n="opc2" v="0b100"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        return ICC_MCTLR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR ICC_MCTLR">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b110"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1100"/>
            
            <enc n="opc2" v="0b100"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        ICC_MCTLR = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>