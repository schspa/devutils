<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>GICR_NSACR</reg_short_name>
      <reg_long_name>Non-secure Access Control Register</reg_long_name>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="Unknown"
  >
    <reg_component>GIC Redistributor</reg_component>
    <reg_frame>SGI_base</reg_frame>
    <reg_offset><hexnumber>0x0E00</hexnumber></reg_offset>
    <reg_instance>GICR_NSACR</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When GICD_CTLR.DS == 0b0</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsAccessSecure()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When !IsAccessSecure()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Enables Secure software to permit Non-secure software to create SGIs targeting the PE connected to this Redistributor by writing to <register_link state="AArch64" id="AArch64-icc_sgi1r_el1.xml">ICC_SGI1R_EL1</register_link>, <register_link state="AArch64" id="AArch64-icc_asgi1r_el1.xml">ICC_ASGI1R_EL1</register_link> or <register_link state="AArch64" id="AArch64-icc_sgi0r_el1.xml">ICC_SGI0R_EL1</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>See <xref linkend="BEIIJFDB" browsertext="Forwarding an SGI to a target PE"/> for more information.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC Redistributor registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>For a description on when a write to <register_link state="AArch64" id="AArch64-icc_sgi0r_el1.xml">ICC_SGI0R_EL1</register_link>, <register_link state="AArch64" id="AArch64-icc_sgi1r_el1.xml">ICC_SGI1R_EL1</register_link> or <register_link state="AArch64" id="AArch64-icc_asgi1r_el1.xml">ICC_ASGI1R_EL1</register_link> is permitted to generate an interrupt see <xref linkend="CHDJCIBI" browsertext="Use of control registers for SGI forwarding"/>.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>GICR_NSACR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="NS_access&lt;x&gt;_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NS_access&lt;x&gt;</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>15</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>2x+1:2x</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Configures the level of Non-secure access permitted when the SGI is in Secure Group 0 or Secure Group 1, as defined from <register_link state="ext" id="ext-gicr_igroupr0.xml">GICR_IGROUPR0</register_link> and <register_link state="ext" id="ext-gicr_igrpmodr0.xml">GICR_IGRPMODR0</register_link>. A field is provided for each SGI. The possible values of each 2-bit field are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
  <para>Non-secure writes are not permitted to generate Secure Group 0 SGIs or Secure Group 1 SGIs.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Non-secure writes are permitted to generate a Secure Group 0 SGI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>As <binarynumber>0b01</binarynumber>, but additionally Non-secure writes to are permitted to generate a Secure Group 1 SGI.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Reserved.</para>
<para>If the field is programmed to the reserved value, then the hardware will treat the field as if it has been programmed to an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> choice of the valid values. However, to maintain the principle that as the value increases additional accesses are permitted Arm strongly recommends that implementations treat this value as <binarynumber>0b10</binarynumber>. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the value read back is the value programmed or the valid value chosen.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="NS_access&lt;x&gt;_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1, this register is RAZ/WI.</para>

      </access_permission_text>
      <access_permission_text>
        <para>When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, this register is Secure, and is RAZ/WI to Non-secure accesses.</para>

      </access_permission_text>
      <access_permission_text>
        <para>This register is used when affinity routing is enabled. When affinity routing is not enabled for the Security state of the interrupt, <register_link state="ext" id="ext-gicd_nsacrn.xml">GICD_NSACR&lt;n&gt;</register_link> with n=0 provides equivalent functionality.</para>

      </access_permission_text>
      <access_permission_text>
        <para>This register does not support PPIs.</para>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>