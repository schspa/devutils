<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>EDITR</reg_short_name>
      <reg_long_name>External Debug Instruction Transfer Register</reg_long_name>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>Debug</reg_component>
    <reg_offset><hexnumber>0x084</hexnumber></reg_offset>
    <reg_instance>EDITR</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>WI</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>WO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Used in Debug state for passing instructions to the PE for execution.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>EDITR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
      <fields_condition>When AArch32 is supported at any Exception level and in AArch32 state</fields_condition>
      <fields_instance>in AArch32 state</fields_instance>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="T32Second_31_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>T32Second</field_name>
          <field_msb>31</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Second halfword of the T32 instruction to be executed on the PE. When EDITR contains a 16-bit T32 instruction, this field is ignored. For more information see <xref linkend="BABGECFE" browsertext="'Behavior in Debug state' in the ArmÂ® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section H2, Debug State." filename="H_debug_state.fm"/></para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="T32First_15_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>T32First</field_name>
          <field_msb>15</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>First halfword of the T32 instruction to be executed on the PE.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="32">
      <fields_condition>When AArch64 is supported at any Exception level and in AArch64 state</fields_condition>
      <fields_instance>in AArch64 state</fields_instance>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="None_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
           <field_shortdesc>A64 instruction to be executed on the PE</field_shortdesc>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>A64 instruction to be executed on the PE.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
        <fields_condition>When AArch32 is supported at any Exception level and in AArch32 state</fields_condition>
      
        <fieldat id="T32Second_31_16" msb="31" lsb="16"/>
        <fieldat id="T32First_15_0" msb="15" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="32">
        <fields_condition>When AArch64 is supported at any Exception level and in AArch64 state</fields_condition>
      
        <fieldat id="None_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>If <register_link state="ext" id="ext-edscr.xml">EDSCR</register_link>.ITE == 0 when the PE exits Debug state on receiving a Restart request trigger event, the behavior of any instruction issued through the ITR in Normal access mode that has not completed execution is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and must do one of the following:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>It must complete execution in Debug state before the PE executes the restart sequence.</content>
</listitem><listitem><content>It must complete execution in Non-debug state before the PE executes the restart sequence.</content>
</listitem><listitem><content>It must be abandoned. This means that the instruction does not execute. Any registers or memory accessed by the instruction are left in an <arm-defined-word>UNKNOWN</arm-defined-word> state.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>EDITR ignores writes if the PE is in Non-debug state.</para>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>