<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>PMCR_EL0</reg_short_name>
      <reg_long_name>Performance Monitors Control Register</reg_long_name>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>PMU</reg_component>
    <reg_offset><hexnumber>0xE04</hexnumber></reg_offset>
    <reg_instance>PMCR_EL0</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalPMUAccess() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalPMUAccess() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch32-pmcr.xml">PMCR</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>7</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>7</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch64-pmcr_el0.xml">PMCR_EL0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>7</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>7</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides details of the Performance Monitors implementation, including the number of counters implemented, and configures and controls the counters.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>This register is only partially mapped to the internal <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link> System register. An external agent must use other means to discover the information held in <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link>[31:11], such as accessing <register_link state="ext" id="ext-pmcfgr.xml">PMCFGR</register_link> and the ID registers.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMCR_EL0 is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_31_11"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RAZ/WI"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>11</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RAZ/WI</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  <para>Hardware must implement this field as RAZ/WI. Software must not rely on the register reading as zero, and must use a read-modify-write sequence to write to the register.</para>

          </field_description>
      </field>
        <field
           id="0_10_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>10</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="LP_7_7_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>LP</field_name>
          <field_msb>7</field_msb>
          <field_lsb>7</field_lsb>
          <field_description order="before">
          
  <para>Long event counter enable. Determines when unsigned overflow is recorded by a counter overflow bit.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Event counter overflow on increment that causes unsigned overflow of <register_link state="ext" id="ext-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link>[31:0].</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Event counter overflow on increment that causes unsigned overflow of <register_link state="ext" id="ext-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link>[63:0].</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL2 is implemented and <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN is less than PMCR_EL0.N, this bit does not affect the operation of event counters in the range [<register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN:(PMCR_EL0.N-1)].</para>
<para>If EL2 is implemented and <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN is less than PMCR_EL0.N, this bit does not affect the operation of event counters in the range [<register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN..(PMCR_EL0.N-1)].</para>
<note><para>The effect of <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN or <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN on the operation of this bit always applies if EL2 is implemented, at all Exception levels including EL2 and EL3, and regardless of whether EL2 is enabled in the current Security state. For more information, see the description of <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN or <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN.</para></note><para>If the highest implemented Exception level is using AArch32, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is RW or RAZ/WI.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
            <fields_condition>When ARMv8.5-PMU is implemented</fields_condition>
      </field>
        <field
           id="0_7_7_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>7</field_msb>
          <field_lsb>7</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="LC_6_6_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="True"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES1"
        >
          <field_name>LC</field_name>
          <field_msb>6</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
          
  <para>Long cycle counter enable. Determines when unsigned overflow is recorded by the cycle counter overflow bit.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Cycle counter overflow on increment that causes unsigned overflow of <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link>[31:0].</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Cycle counter overflow on increment that causes unsigned overflow of <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link>[63:0].</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>Arm deprecates use of <register_link state="ext" id="ext-pmcr_el0.xml">PMCR_EL0</register_link>.LC = 0.</para>

          </field_description>
            
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
      </field>
        <field
           id="1_6_6_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES1"
        >
          <field_name>1</field_name>
          <field_msb>6</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES1</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="DP_5_5_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>DP</field_name>
          <field_msb>5</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
          
  <para>Disable cycle counter when event counting is prohibited. The possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Cycle counting by <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> is not affected by this bit.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>When event counting for counters in the range [0..(<register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN-1)] is prohibited, cycle counting by <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> is disabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>For more information about the interaction between the Performance Monitors and EL3, see <xref linkend="Cihidfee" browsertext="'Effect of EL3 and EL2' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile" filename="D_the_performance_monitors_extension"/>.</para>

          </field_description>
          <field_resets>
  
  
    <field_reset>
      <field_reset_special_text>
  <para>When this register has an architecturally-defined reset value, if this field is implemented as an RW field it resets to:</para>
<list type="unordered">
<listitem><content>A value that is architecturally <arm-defined-word>UNKNOWN</arm-defined-word> if the reset is into an Exception level that is using AArch64.</content>
</listitem><listitem><content>0 if the reset is into an Exception level that is using AArch32.</content>
</listitem></list>
</field_reset_special_text>
    </field_reset>
</field_resets>
            <fields_condition>When EL3 is implemented or (ARMv8.1-PMU is implemented and EL2 is implemented)</fields_condition>
      </field>
        <field
           id="0_5_5_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>5</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="X_4_4_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RAZ/WI"
        >
          <field_name>X</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Enable export of events in an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> PMU event export bus.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Do not export events.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Export events where not prohibited.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This field enables the exporting of events over an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> PMU event export bus to another device, for example to an <arm-defined-word>OPTIONAL</arm-defined-word> PE trace unit.</para>
<para>No events are exported when counting is prohibited.</para>
<para>This field does not affect the generation of Performance Monitors overflow interrupt requests or signaling to a cross-trigger interface (CTI) that can be implemented as signals exported from the PE.</para>

          </field_description>
          <field_resets>
  
  
    <field_reset>
      <field_reset_special_text>
  <para>When this register has an architecturally-defined reset value, if this field is implemented as an RW field it resets to:</para>
<list type="unordered">
<listitem><content>A value that is architecturally <arm-defined-word>UNKNOWN</arm-defined-word> if the reset is into an Exception level that is using AArch64.</content>
</listitem><listitem><content>0 if the reset is into an Exception level that is using AArch32.</content>
</listitem></list>
</field_reset_special_text>
    </field_reset>
</field_resets>
            <fields_condition>When the implementation includes a PMU event export bus</fields_condition>
      </field>
        <field
           id="0_4_4_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RAZ/WI"
        >
          <field_name>0</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RAZ/WI</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="D_3_3_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>D</field_name>
          <field_msb>3</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
          
  <para>Clock divider.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>When enabled, <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> counts every clock cycle.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>When enabled, <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> counts once every 64 clock cycles.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If PMCR_EL0.LC == 1, this bit is ignored and the cycle counter counts every clock cycle.</para>
<para>Arm deprecates use of PMCR_EL0.D = 1.</para>

          </field_description>
          <field_resets>
  
  
    <field_reset>
      <field_reset_special_text>
  <para>When this register has an architecturally-defined reset value, if this field is implemented as an RW field it resets to:</para>
<list type="unordered">
<listitem><content>A value that is architecturally <arm-defined-word>UNKNOWN</arm-defined-word> if the reset is into an Exception level that is using AArch64.</content>
</listitem><listitem><content>0 if the reset is into an Exception level that is using AArch32.</content>
</listitem></list>
</field_reset_special_text>
    </field_reset>
</field_resets>
            <fields_condition>When AArch32 is supported at any Exception level</fields_condition>
      </field>
        <field
           id="0_3_3_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>3</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="C_2_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>C</field_name>
          <field_msb>2</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
          
  <para>Cycle counter reset. The effects of writing to this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>No action.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Reset <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> to zero.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is always RAZ.</para>
<note><para>Resetting <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link> does not change the cycle counter overflow bit.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
          <field_access>
              <field_access_state>
               <field_access_type>WO</field_access_type>
              </field_access_state>
          </field_access>
      </field>
        <field
           id="P_1_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>P</field_name>
          <field_msb>1</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Event counter reset. The effects of writing to this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>No action.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Reset all event counters, not including <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link>, to zero.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is always RAZ.</para>
<note><para>Resetting the event counters does not change the event counter overflow bits.</para><para>If <xref browsertext="ARMv8.5-PMU" filename="A_armv8_architecture_extensions.fm" linkend="ARMv8.5.PMU"></xref> is implemented, the value of <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HLP, or PMCR_EL0.LP is ignored and bits [63:0] of all event counters are reset.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
          <field_access>
              <field_access_state>
               <field_access_type>WO</field_access_type>
              </field_access_state>
          </field_access>
      </field>
        <field
           id="E_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>E</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Enable.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>All event counters in the range [0..(PMN-1)] and <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link>, are disabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>All event counters in the range [0..(PMN-1)] and <register_link state="ext" id="ext-pmccntr_el0.xml">PMCCNTR_EL0</register_link>, are enabled by <register_link state="ext" id="ext-pmcntenset_el0.xml">PMCNTENSET_EL0</register_link>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL2 is implemented then:</para>
<list type="unordered">
<listitem><content>If EL2 is using AArch32, PMN is <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN.</content>
</listitem><listitem><content>If EL2 is using AArch64, PMN is <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN.</content>
</listitem><listitem><content>If PMN is less than PMCR_EL0.N, this bit does not affect the operation of event counters in the range [PMN..(PMCR_EL0.N-1)].</content>
</listitem></list>
<para>If EL2 is not implemented, PMN is PMCR_EL0.N.</para>
<note><para>The effect of the following fields on the operation of this bit applies if EL2 is implemented regardless of whether EL2 is enabled in the current Security state:</para><list type="unordered"><listitem><content><para><register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN. See the description of <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMN for more information.</para></content></listitem><listitem><content><para><register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN. See the description of <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.HPMN for more information.</para></content></listitem></list></note>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_number>0</field_reset_number>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="0_31_11" msb="31" lsb="11"/>
        <fieldat id="0_10_8" msb="10" lsb="8"/>
        <fieldat id="LP_7_7_1" msb="7" lsb="7"/>
        <fieldat id="LC_6_6_1" msb="6" lsb="6"/>
        <fieldat id="DP_5_5_1" msb="5" lsb="5"/>
        <fieldat id="X_4_4_1" msb="4" lsb="4"/>
        <fieldat id="D_3_3_1" msb="3" lsb="3"/>
        <fieldat id="C_2_2" msb="2" lsb="2"/>
        <fieldat id="P_1_1" msb="1" lsb="1"/>
        <fieldat id="E_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalPMUAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>