<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>PMEVCNTR&lt;n&gt;_EL0</reg_short_name>
      <reg_long_name>Performance Monitors Event Count Registers</reg_long_name>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>30</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>PMU</reg_component>
    <reg_offset><hexnumber>0x000</hexnumber> + 8n</reg_offset>
    <reg_instance>PMEVCNTR&lt;n&gt;_EL0</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalPMUAccess() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalPMUAccess() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds event counter n, which counts events, where n is 0 to 30.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>PMEVCNTR&lt;n&gt;_EL0 is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_condition>When ARMv8.5-PMU is implemented</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="None_63_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
           <field_shortdesc>Event counter n</field_shortdesc>
          <field_msb>63</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Event counter n. Value of event counter n, where n is the number of this register and is a number from 0 to 30.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  <para>If the highest implemented Exception level is using AArch32, the optional external interface to the performance monitors is implemented, and the <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link>.LP and <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HLP bits are RAZ/WI, then locations in the external interface to the performance monitors that map to PMEVCNTR&lt;n&gt;_EL0[63:32] return <arm-defined-word>UNKNOWN</arm-defined-word> values on reads.</para>
<para>If the implementation does not support AArch64 at any Exception level, bits [63:32] of the event counters are not required to be implemented.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="32">
      <fields_condition></fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="None_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
           <field_shortdesc>Event counter n</field_shortdesc>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Event counter n. Value of event counter n, where n is the number of this register and is a number from 0 to 30.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
        <fields_condition>When ARMv8.5-PMU is implemented</fields_condition>
      
        <fieldat id="None_63_0" msb="63" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="32">
        <fields_condition></fields_condition>
      
        <fieldat id="None_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="30"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>External accesses to the performance monitors ignore <register_link state="AArch64" id="AArch64-pmuserenr_el0.xml">PMUSERENR_EL0</register_link> and, if implemented, <register_link state="AArch64" id="AArch64-mdcr_el2.xml">MDCR_EL2</register_link>.{TPM, TPMCR, HPMN} and <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.TPM. This means that all counters are accessible regardless of the current Exception level or privilege of the access.</para>

      </access_permission_text>
      <access_permission_text>
        <para>If <xref browsertext="ARMv8.5-PMU" filename="A_armv8_architecture_extensions.fm" linkend="v8.5.PMU"/> is not implemented, when IsCorePowered(), DoubleLockStatus(), OSLockStatus() or !AllowExternalPMUAccess(), 32-bit accesses to <hexnumber>0x004</hexnumber>+8&#215;n have a <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> behavior.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalPMUAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>