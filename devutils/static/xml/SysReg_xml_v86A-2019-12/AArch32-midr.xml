<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>MIDR</reg_short_name>
      <reg_long_name>Main ID Register</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-midr_el1.xml">MIDR_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="ext-midr_el1.xml">MIDR_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>External</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides identification information for the PE, including an implementer code for the device and a device ID number.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>Some fields of the MIDR are <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>. For details of the values of these fields for a particular Armv8 implementation, and any implementation-specific significance of these values, see the product documentation.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>MIDR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="Implementer_31_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Implementer</field_name>
          <field_msb>31</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>The Implementer code. This field must hold an implementer code that has been assigned by Arm. Assigned codes include the following:</para>
<table><tgroup cols="2"><thead><row><entry>Hex representation</entry><entry>Implementer</entry></row></thead><tbody><row><entry><hexnumber>0x00</hexnumber></entry><entry>Reserved for software use</entry></row><row><entry><hexnumber>0xC0</hexnumber></entry><entry>Ampere Computing</entry></row><row><entry><hexnumber>0x41</hexnumber></entry><entry>Arm Limited</entry></row><row><entry><hexnumber>0x42</hexnumber></entry><entry>Broadcom Corporation</entry></row><row><entry><hexnumber>0x43</hexnumber></entry><entry>Cavium Inc.</entry></row><row><entry><hexnumber>0x44</hexnumber></entry><entry>Digital Equipment Corporation</entry></row><row><entry><hexnumber>0x46</hexnumber></entry><entry>Fujitsu Ltd.</entry></row><row><entry><hexnumber>0x49</hexnumber></entry><entry>Infineon Technologies AG</entry></row><row><entry><hexnumber>0x4D</hexnumber></entry><entry>Motorola or Freescale Semiconductor Inc.</entry></row><row><entry><hexnumber>0x4E</hexnumber></entry><entry>NVIDIA Corporation</entry></row><row><entry><hexnumber>0x50</hexnumber></entry><entry>Applied Micro Circuits Corporation</entry></row><row><entry><hexnumber>0x51</hexnumber></entry><entry>Qualcomm Inc.</entry></row><row><entry><hexnumber>0x56</hexnumber></entry><entry>Marvell International Ltd.</entry></row><row><entry><hexnumber>0x69</hexnumber></entry><entry>Intel Corporation</entry></row></tbody></tgroup></table>
<para>Arm can assign codes that are not published in this manual. All values not assigned by Arm are reserved and must not be used.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Variant_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Variant</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> variant number. Typically, this field is used to distinguish between different product variants, or major revisions of a product.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Architecture_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Architecture</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>The permitted values of this field are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Armv4.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>Armv4T.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
  <para>Armv5 (obsolete).</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
  <para>Armv5T.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
  <para>Armv5TE.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
  <para>Armv5TEJ.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
  <para>Armv6.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
  <para>Architectural features are individually identified in the ID_* registers, see <xref linkend="register_functional_index.aarch32.id" browsertext="'ID registers' in the ArmÂ® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section K12.5.3" filename="appx_registers_index.fm"/>.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="PartNum_15_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PartNum</field_name>
          <field_msb>15</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> primary part number for the device.</para>
<para>On processors implemented by Arm, if the top four bits of the primary part number are <hexnumber>0x0</hexnumber> or <hexnumber>0x7</hexnumber>, the variant and architecture are encoded differently.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="Revision_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Revision</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> revision number for the device.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="Implementer_31_24" msb="31" lsb="24"/>
        <fieldat id="Variant_23_20" msb="23" lsb="20"/>
        <fieldat id="Architecture_19_16" msb="19" lsb="16"/>
        <fieldat id="PartNum_15_4" msb="15" lsb="4"/>
        <fieldat id="Revision_3_0" msb="3" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRC MIDR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b0000"/>
            
            <enc n="CRm" v="0b0000"/>
            
            <enc n="opc2" v="0b000"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) then
        return VPIDR_EL2&lt;31:0&gt;;
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) then
        return VPIDR;
    else
        return MIDR;
elsif PSTATE.EL == EL2 then
    return MIDR;
elsif PSTATE.EL == EL3 then
    return MIDR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>