<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>EDECCR</reg_short_name>
      <reg_long_name>External Debug Exception Catch Control Register</reg_long_name>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>Debug</reg_component>
    <reg_offset><hexnumber>0x098</hexnumber></reg_offset>
    <reg_instance>EDECCR</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-oseccr_el1.xml">OSECCR_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-dbgoseccr.xml">DBGOSECCR</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Controls Exception Catch debug events.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>EDECCR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
      <fields_condition>When ARMv8.2-Debug is implemented</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_31_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="NSR&lt;n&gt;_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NSR&lt;n&gt;</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n+12</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Controls Non-secure exception catch on exception return to EL&lt;n&gt; in conjunction with NSE&lt;n&gt;. See the <xref browsertext="summary of Exception Catch debug event control" filename="H_halting_debug_events.fm" linkend="BEIHJDGD"></xref> for information.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the corresponding NSE&lt;n&gt; bit is 0, then Exception Catch debug events are disabled for Non-secure Exception level &lt;n&gt;.</para>
<para>If the corresponding NSE&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry, reset entry and exception return to Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the corresponding NSE&lt;n&gt; bit is 0, then Exception Catch debug events are enabled for exception returns to Non-secure Exception level &lt;n&gt;.</para>
<para>If the corresponding NSE&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry and reset entry to Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 0, this field is reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
<note><para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether a reset entry to an Exception level is permitted to generate an Exception Catch debug event.</para></note><para>A value of the NSR field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the NSR field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for NSR by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_number>0</field_reset_number>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="SR&lt;n&gt;_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SR&lt;n&gt;</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n+8</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Controls Secure exception catch on exception return to EL&lt;n&gt; in conjunction with SE&lt;n&gt;. See the <xref browsertext="summary of Exception Catch debug event control" filename="H_halting_debug_events.fm" linkend="BEIHJDGD"></xref> for information.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the corresponding SE&lt;n&gt; bit is 0, then Exception Catch debug events are disabled for Secure Exception level &lt;n&gt;.</para>
<para>If the corresponding SE&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry, reset entry and exception return to Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the corresponding SE&lt;n&gt; bit is 0, then Exception Catch debug events are enabled for exception returns to Secure Exception level &lt;n&gt;.</para>
<para>If the corresponding SE&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry and reset entry to Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 1, this field is reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
<note><para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether a reset entry to an Exception level is permitted to generate an Exception Catch debug event.</para></note><para>A value of the SR field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the SR field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for SR by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_number>0</field_reset_number>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="NSE&lt;n&gt;_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NSE&lt;n&gt;</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n+4</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Coarse-grained Non-secure exception catch for EL&lt;n&gt;. This controls whether Exception Catch debug events are enabled for Non-secure EL&lt;n&gt;. This also controls:</para>
<list type="unordered">
<listitem><content>The behavior of exception catch on exception entry to EL&lt;n&gt;.</content>
</listitem><listitem><content>The behavior of exception catch on exception return to EL&lt;n&gt; in conjunction with NSR&lt;n&gt;.</content>
</listitem></list>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the corresponding NSR&lt;n&gt; bit is 0, then Exception Catch debug events are disabled for Non-secure Exception level &lt;n&gt;.</para>
<para>If the corresponding NSR&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception returns to Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the corresponding NSR&lt;n&gt; bit is 0, then Exception Catch debug events are enabled for exception entry, reset entry and exception return to Non-secure Exception level &lt;n&gt;.</para>
<para>If the corresponding NSR&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry and reset entry to Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 0, this field is reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
<para>A value of the NSE field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the NSE field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for NSE by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_number>0</field_reset_number>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="SE&lt;n&gt;_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SE&lt;n&gt;</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Coarse-grained Secure exception catch for EL&lt;n&gt;. This field controls whether Exception Catch debug events are enabled for Secure EL&lt;n&gt;.</para>
<list type="unordered">
<listitem><content>The behavior of exception catch on exception entry to EL&lt;n&gt;.</content>
</listitem><listitem><content>The behavior of exception catch on exception return to EL&lt;n&gt; in conjunction with SR&lt;n&gt;.</content>
</listitem></list>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the corresponding SR&lt;n&gt; bit is 0, then Exception Catch debug events are disabled for Secure Exception level &lt;n&gt;.</para>
<para>If the corresponding SR&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception returns to Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the corresponding SR&lt;n&gt; bit is 0, then Exception Catch debug events are enabled for exception entry, reset entry and exception return to Secure Exception level &lt;n&gt;.</para>
<para>If the corresponding SR&lt;n&gt; bit is 1, then Exception Catch debug events are enabled for exception entry and reset entry to Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 1, this field is reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
<para>A value of the SE field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the SE field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for SE by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_number>0</field_reset_number>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="32">
      <fields_condition></fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_31_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="NSE&lt;n&gt;_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NSE&lt;n&gt;</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n+4</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Coarse-grained Non-secure exception catch. If EL3 and EL2 are not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 0, this field is reserved, <arm-defined-word>RES0</arm-defined-word>. Otherwise, possible values for this field are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Exception Catch debug events are disabled for Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Exception Catch debug events are enabled for Non-secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>A value of the NSE field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the NSE field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for NSE by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SE&lt;n&gt;_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SE&lt;n&gt;</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>3</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>n</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Coarse-grained Secure exception catch.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Exception Catch debug events are disabled for Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Exception Catch debug events are enabled for Secure Exception level &lt;n&gt;.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If EL3 is not implemented and the PE behaves as if <register_link state="AArch64" id="AArch64-scr_el3.xml">SCR_EL3</register_link>.NS is set to 1, this field is reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
<para>A value of the SE field that enables an Exception Catch debug event for an Exception level that is not implemented is reserved. If the SE field is programmed with a reserved value then:</para>
<list type="unordered">
<listitem><content>The PE behaves as if it is programmed with a defined value, other than for a read of EDECCR.</content>
</listitem><listitem><content>The value returned for SE by a read of EDECCR is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
        <fields_condition>When ARMv8.2-Debug is implemented</fields_condition>
      
        <fieldat id="0_31_16" msb="31" lsb="16"/>
        <fieldat id="NSR&lt;n&gt;_15_12" msb="15" lsb="12"/>
        <fieldat id="SR&lt;n&gt;_11_8" msb="11" lsb="8"/>
        <fieldat id="NSE&lt;n&gt;_7_4" msb="7" lsb="4"/>
        <fieldat id="SE&lt;n&gt;_3_0" msb="3" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="32">
        <fields_condition></fields_condition>
      
        <fieldat id="0_31_8" msb="31" lsb="8"/>
        <fieldat id="NSE&lt;n&gt;_7_4" msb="7" lsb="4"/>
        <fieldat id="SE&lt;n&gt;_3_0" msb="3" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>