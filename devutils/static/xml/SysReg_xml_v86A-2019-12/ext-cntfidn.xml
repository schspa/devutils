<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>CNTFID&lt;n&gt;</reg_short_name>
      <reg_long_name>Counter Frequency IDs, n > 0</reg_long_name>
          <reg_array>
              <reg_array_start>1</reg_array_start>
              <reg_array_end>1003</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="Any"
  >
    <reg_component>Timer</reg_component>
    <reg_frame>CNTControlBase</reg_frame>
    <reg_offset><hexnumber>0x020</hexnumber> + 4n</reg_offset>
    <reg_instance>CNTFID&lt;n&gt;</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_type>RO or RW</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Indicates alternative system counter update frequencies.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Generic Timer registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>For more information see <xref browsertext="'Power and reset domains for the system level implementation of the Generic Timer' in the Arm&#174; Architecture Reference Manual, Armv8, for Armv8-A architecture profile" filename="I_system_level_implementation_of_the_generic__.fm" linkend="CEGHAIAF"/>.</para>

      </configuration_text>
      <configuration_text>
        <para>The possible frequencies for the system counter are stored in the Frequency modes table as 32-bit words starting with the base frequency, <register_link state="ext" id="ext-cntfid0.xml">CNTFID0</register_link>, see <xref browsertext="'The Frequency modes table' in the Arm&#174; Architecture Reference Manual, Armv8, for Armv8-A architecture profile" filename="I_system_level_implementation_of_the_generic__.fm" linkend="BABCDIBI"/>.</para>

      </configuration_text>
      <configuration_text>
        <para>The number of CNTFID&lt;n&gt; registers is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>, and the only required CNTFID&lt;n&gt; register is <register_link state="ext" id="ext-cntfid0.xml">CNTFID0</register_link>.</para>

      </configuration_text>
      <configuration_text>
        <para>The final entry in the Frequency modes table must be followed by a 32-bit word of zero value, to mark the end of the table.</para>

      </configuration_text>
      <configuration_text>
        <para>The architecture can support up to 1004 entries in the Frequency modes table, including the zero-word end marker, and the number of entries is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> up to this limit. For an implementation that includes registers in the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> register space <hexnumber>0x0C0</hexnumber>-<hexnumber>0x0FC</hexnumber>, the maximum number of entries in the Frequency modes table is 40, including the zero-word end marker.</para>

      </configuration_text>
      <configuration_text>
        <para>Typically, the Frequency modes table will be in read-only memory. However, a system implementation might use read/write memory for the table, and initialize the table entries as part of its start-up sequence.</para>

      </configuration_text>
      <configuration_text>
        <para>If the Frequency modes table is in read/write memory, Arm strongly recommends that the table is not updated once the system is running.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>CNTFID&lt;n&gt; is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="Frequency_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>Frequency</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>A system counter update frequency, in Hz. Must be an exact divisor of the base frequency. Arm strongly recommends that all frequency values in the Frequency modes table are integer power-of-two divisors of the base frequency.</para>
<para>When the system timer is operating at a lower frequency than the base frequency, the increment applied at each counter update is given by:</para>
<para>increment = (base frequency) / (selected frequency)</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="Frequency_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" min="1" max="1003"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this register is RO or RW</para>

      </access_permission_text>
      <access_permission_text>
        <para>In a system that supports Secure and Non-secure memory maps the CNTControlBase frame, that includes these registers, is implemented only in the Secure memory map.</para>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>