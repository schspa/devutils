<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ID_MMFR4</reg_short_name>
      <reg_long_name>Memory Model Feature Register 4</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-id_mmfr4_el1.xml">ID_MMFR4_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information about the implemented memory model and memory management support in AArch32 state.</para>

      </purpose_text>
      <purpose_text>
        <para>Must be interpreted with <register_link state="AArch32" id="AArch32-id_mmfr0.xml">ID_MMFR0</register_link>, <register_link state="AArch32" id="AArch32-id_mmfr1.xml">ID_MMFR1</register_link>, <register_link state="AArch32" id="AArch32-id_mmfr2.xml">ID_MMFR2</register_link>, and <register_link state="AArch32" id="AArch32-id_mmfr3.xml">ID_MMFR3</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers see <xref linkend="CHDIDAGF" browsertext="'Principles of the ID scheme for fields in ID registers' in the Arm&#174; Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section G7.1.3"/>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ID_MMFR4 is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="EVT_31_28"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>EVT</field_name>
          <field_msb>31</field_msb>
          <field_lsb>28</field_lsb>
          <field_description order="before">
          
  <para>Enhanced Virtualization Traps. If EL2 is implemented, indicates support for the <register_link state="AArch32" id="AArch32-hcr2.xml">HCR2</register_link>.{TTLBIS, TOCU, TICAB, TID4} traps. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-hcr2.xml">HCR2</register_link>.{TTLBIS, TOCU, TICAB, TID4} traps are not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-hcr2.xml">HCR2</register_link>.{TOCU, TICAB, TID4} traps are supported. <register_link state="AArch32" id="AArch32-hcr2.xml">HCR2</register_link>.TTLBIS trap is not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-hcr2.xml">HCR2</register_link>.{TTLBIS, TOCU, TICAB, TID4} traps are supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.2-EVT" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.EVT"></xref> implements the functionality identified by the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber>.</para>
<para>If EL2 is not implemented, the only permitted value is <binarynumber>0b0000</binarynumber>.</para>
<para>From Armv8.1, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.5, if EL2 is implemented, the only permitted value is <binarynumber>0b0010</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CCIDX_27_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CCIDX</field_name>
          <field_msb>27</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Support for use of the revised CCSIDR format and the presence of the CCSIDR2 is indicated. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>32-bit format implemented for all levels of the CCSIDR, and the CCSIDR2 register is not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>64-bit format implemented for all levels of the CCSIDR, and the CCSIDR2 register is implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.3-CCIDX" filename="A_armv8_architecture_extensions.fm" linkend="v8.3.CCIDX"></xref> implements the functionality identified by <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="LSM_23_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LSM</field_name>
          <field_msb>23</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Indicates support for LSMAOE and nTLSMD bits in <register_link state="AArch32" id="AArch32-hsctlr.xml">HSCTLR</register_link> and <register_link state="AArch32" id="AArch32-sctlr.xml">SCTLR</register_link>. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>LSMAOE and nTLSMD bits not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>LSMAOE and nTLSMD bits supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.2-LSMAOC" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.LSMAOC"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="HPDS_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>HPDS</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Hierarchical permission disables bits in translation tables. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Disabling of hierarchical controls not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Supports disabling of hierarchical controls using the <register_link state="AArch32" id="AArch32-ttbcr2.xml">TTBCR2</register_link>.HPD0, <register_link state="AArch32" id="AArch32-ttbcr2.xml">TTBCR2</register_link>.HPD1, and <register_link state="AArch32" id="AArch32-htcr.xml">HTCR</register_link>.HPD bits.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
  <para>As for value <binarynumber>0b0001</binarynumber>, and adds possible hardware allocation of bits[62:59] of the translation table descriptors from the final lookup level for <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> use.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.2-AA32HPD" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.AA32HPD"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref browsertext="ARMv8.2-TTPBHA" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTPBHA"></xref> implements the functionality added by the value <binarynumber>0b0010</binarynumber>.</para>
<note><para>The value <binarynumber>0b0000</binarynumber> implies that the encoding for <register_link state="AArch32" id="AArch32-ttbcr2.xml">TTBCR2</register_link> is <arm-defined-word>UNDEFINED</arm-defined-word>.</para></note>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="CnP_15_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>CnP</field_name>
          <field_msb>15</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>Common not Private translations. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Common not Private translations not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Common not Private translations supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.2-TTCNP" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTCNP"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2 the only permitted value is <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="XNX_11_8"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>XNX</field_name>
          <field_msb>11</field_msb>
          <field_lsb>8</field_lsb>
          <field_description order="before">
          
  <para>Support for execute-never control distinction by Exception level at stage 2. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>Distinction between EL0 and EL1 execute-never control at stage 2 not supported.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>Distinction between EL0 and EL1 execute-never control at stage 2 supported.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para><xref browsertext="ARMv8.2-TTS2UXN" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTS2UXN"></xref> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>When <xref browsertext="ARMv8.2-TTS2UXN" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTS2UXN"></xref> is implemented:</para>
<list type="unordered">
<listitem><content>If all of the following conditions are true, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the value of ID_MMFR4.XNX is <binarynumber>0b0000</binarynumber> or <binarynumber>0b0001</binarynumber>:<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-id_aa64mmfr1_el1.xml">ID_AA64MMFR1_EL1</register_link>.XNX ==1.</content>
</listitem><listitem><content>EL2 cannot use AArch32.</content>
</listitem><listitem><content>EL1 can use AArch32.</content>
</listitem></list>
</content>
</listitem><listitem><content>If EL2 can use AArch32 then the only permitted value is <binarynumber>0b0001</binarynumber>.</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="AC2_7_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AC2</field_name>
          <field_msb>7</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Indicates the extension of the <register_link state="AArch32" id="AArch32-actlr.xml">ACTLR</register_link> and <register_link state="AArch32" id="AArch32-hactlr.xml">HACTLR</register_link> registers using <register_link state="AArch32" id="AArch32-actlr2.xml">ACTLR2</register_link> and <register_link id="AArch32-hactlr2.xml" state="AArch32">HACTLR2</register_link>. Defined values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-actlr2.xml">ACTLR2</register_link> and <register_link id="AArch32-hactlr2.xml" state="AArch32">HACTLR2</register_link> are not implemented.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-actlr2.xml">ACTLR2</register_link> and <register_link id="AArch32-hactlr2.xml" state="AArch32">HACTLR2</register_link> are implemented.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>In Armv8.0 and Armv8.1 the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the only permitted value is <binarynumber>0b0001</binarynumber>.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
        <field
           id="SpecSEI_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SpecSEI</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Describes whether the PE can generate SError interrupt exceptions from speculative reads of memory, including speculative instruction fetches. The defined values of this field are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
  <para>The PE never generates an SError interrupt due to an External abort on a speculative read.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
  <para>The PE might generate an SError interrupt due to an External abort on a speculative read.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="EVT_31_28" msb="31" lsb="28"/>
        <fieldat id="CCIDX_27_24" msb="27" lsb="24"/>
        <fieldat id="LSM_23_20" msb="23" lsb="20"/>
        <fieldat id="HPDS_19_16" msb="19" lsb="16"/>
        <fieldat id="CnP_15_12" msb="15" lsb="12"/>
        <fieldat id="XNX_11_8" msb="11" lsb="8"/>
        <fieldat id="AC2_7_4" msb="7" lsb="4"/>
        <fieldat id="SpecSEI_3_0" msb="3" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRC ID_MMFR4">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b0000"/>
            
            <enc n="CRm" v="0b0010"/>
            
            <enc n="opc2" v="0b110"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; (!IsZero(ID_MMFR4) || boolean IMPLEMENTATION_DEFINED "ID_MMFR4 trapped by HCR_EL2.TID3") &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; (!IsZero(ID_MMFR4) || boolean IMPLEMENTATION_DEFINED "ID_MMFR4 trapped by HCR.TID3") &amp;&amp; HCR.TID3 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        return ID_MMFR4;
elsif PSTATE.EL == EL2 then
    return ID_MMFR4;
elsif PSTATE.EL == EL3 then
    return ID_MMFR4;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>