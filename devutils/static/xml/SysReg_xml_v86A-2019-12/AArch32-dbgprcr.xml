<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>DBGPRCR</reg_short_name>
      <reg_long_name>Debug Power Control Register</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
      

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-dbgprcr_el1.xml">DBGPRCR_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Controls behavior of the PE on powerdown request.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>Bit [0] of this register is mapped to <register_link state="ext" id="ext-edprcr.xml">EDPRCR</register_link>.CORENPDRQ, bit [0] of the external view of this register.</para>

      </configuration_text>
      <configuration_text>
        <para>The other bits in these registers are not mapped to each other.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>DBGPRCR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="0_31_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="CORENPDRQ_0_0_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CORENPDRQ</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Core no powerdown request. Requests emulation of powerdown.</para>
<para>This request is typically passed to an external power controller. This means that whether a request causes power up is dependent on the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> nature of the system. The power controller must not allow the Core power domain to switch off while this bit is 1.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the system responds to a powerdown request, it powers down Core power domain.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the system responds to a powerdown request, it does not powerdown the Core power domain, but instead emulates a powerdown of that domain.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>In an implementation that includes the recommended external debug interface, this bit drives the DBGNOPWRDWN signal.</para>
<para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is reset to the Cold reset value on exit from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> software-visible retention state. For more information about retention states see <xref browsertext="Core power domain power states" filename="H_debug_reset_and_powerdown_support.fm" linkend="CHDJJJEE"></xref>.</para>
<note><para>Writes to this bit are not prohibited by the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> authentication interface. This means that a debugger can request emulation of powerdown regardless of whether invasive debug is permitted.</para></note>

          </field_description>
          <field_resets>
  
  
    <field_reset>
      <field_reset_special_text>
  <para>On a Cold reset, this field is set to 1 if the powerup request is implemented and the powerup request has been asserted, and is set to 0 otherwise.</para>
</field_reset_special_text>
    </field_reset>
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
            <fields_condition>When ARMv8.3-DoPD is implemented</fields_condition>
      </field>
        <field
           id="CORENPDRQ_0_0_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           reserved_type="RES0"
        >
          <field_name>CORENPDRQ</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Core no powerdown request. Requests emulation of powerdown.</para>
<para>This request is typically passed to an external power controller. This means that whether a request causes power up is dependent on the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> nature of the system. The power controller must not allow the Core power domain to switch off while this bit is 1.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the system responds to a powerdown request, it powers down Core power domain.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the system responds to a powerdown request, it does not powerdown the Core power domain, but instead emulates a powerdown of that domain.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>In an implementation that includes the recommended external debug interface, this bit drives the DBGNOPWRDWN signal.</para>
<para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is reset to the value of <register_link state="ext" id="ext-edprcr.xml">EDPRCR</register_link>.COREPURQ on exit from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> software-visible retention state. For more information about retention states see <xref browsertext="Core power domain power states" filename="H_debug_reset_and_powerdown_support.fm" linkend="CHDJJJEE"></xref>.</para>
<note><para>Writes to this bit are not prohibited by the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> authentication interface. This means that a debugger can request emulation of powerdown regardless of whether invasive debug is permitted.</para></note>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_other_field>
        
        <field_reset_other_field_regname state="ext">EDPRCR</field_reset_other_field_regname>
        <field_reset_other_field_fieldname>COREPURQ</field_reset_other_field_fieldname>
      </field_reset_other_field>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Warm">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="0_31_1" msb="31" lsb="1"/>
        <fieldat id="CORENPDRQ_0_0_1" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  


      <access_mechanism accessor="MRC DBGPRCR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1110"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b0001"/>
            
            <enc n="CRm" v="0b0100"/>
            
            <enc n="opc2" v="0b100"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.&lt;TDE,TDOSA&gt; != '00' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x05);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.&lt;TDE,TDOSA&gt; != '00' then
        AArch32.TakeHypTrapException(0x05);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TDOSA == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x05);
    else
        return DBGPRCR;
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TDOSA == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x05);
    else
        return DBGPRCR;
elsif PSTATE.EL == EL3 then
    return DBGPRCR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR DBGPRCR">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1110"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b0001"/>
            
            <enc n="CRm" v="0b0100"/>
            
            <enc n="opc2" v="0b100"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; MDCR_EL2.&lt;TDE,TDOSA&gt; != '00' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x05);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HDCR.&lt;TDE,TDOSA&gt; != '00' then
        AArch32.TakeHypTrapException(0x05);
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TDOSA == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x05);
    else
        DBGPRCR = R[t];
elsif PSTATE.EL == EL2 then
    if HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; MDCR_EL3.TDOSA == '1' then
        AArch64.AArch32SystemAccessTrap(EL3, 0x05);
    else
        DBGPRCR = R[t];
elsif PSTATE.EL == EL3 then
    DBGPRCR = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>