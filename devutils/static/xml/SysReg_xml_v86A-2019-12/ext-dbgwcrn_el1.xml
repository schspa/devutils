<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>DBGWCR&lt;n&gt;_EL1</reg_short_name>
      <reg_long_name>Debug Watchpoint Control Registers</reg_long_name>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>15</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="Core"
  >
    <reg_component>Debug</reg_component>
    <reg_offset><hexnumber>0x808</hexnumber> + 16n</reg_offset>
    <reg_instance>DBGWCR&lt;n&gt;_EL1</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RO</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and !SoftwareLockStatus()</reg_access_level>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
        
        <reg_access_state>
            <reg_access_type>ERROR</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-dbgwcrn_el1.xml">DBGWCR&lt;n&gt;_EL1</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
          <reg_mapping>
              
            <mapped_name filename="AArch32-dbgwcrn.xml">DBGWCR&lt;n&gt;</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch32</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Holds control information for a watchpoint. Forms watchpoint n together with value register <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link>.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If watchpoint n is not implemented then accesses to this register are:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>When IsCorePowered() &amp;&amp; !DoubleLockStatus() &amp;&amp; !OSLockStatus() &amp;&amp; AllowExternalDebugAccess(), <arm-defined-word>RES0</arm-defined-word>.</content>
</listitem><listitem><content>Otherwise, a <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> choice of <arm-defined-word>RES0</arm-defined-word> or ERROR.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>DBGWCR&lt;n&gt;_EL1 is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  <para>When the E field is zero, all the other fields in the register are ignored.</para>

    </text_before_fields>
    
        <field
           id="0_31_29"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>31</field_msb>
          <field_lsb>29</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="MASK_28_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>MASK</field_name>
          <field_msb>28</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Address mask. Only objects up to 2GB can be watched using a single mask.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b00000</field_value>
        <field_value_description>
  <para>No mask.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b00001</field_value>
        <field_value_description>
  <para>Reserved.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b00010</field_value>
        <field_value_description>
  <para>Reserved.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>If programmed with a reserved value, a watchpoint must behave as if either:</para>
<list type="unordered">
<listitem><content>MASK has been programmed with a defined value, which might be 0 (no mask), other than for a direct read of DBGWCRn_EL1.</content>
</listitem><listitem><content>The watchpoint is disabled.</content>
</listitem></list>
<para>Software must not rely on this property because the behavior of reserved values might change in a future revision of the architecture.</para>
<para>Other values mask the corresponding number of address bits, from <binarynumber>0b00011</binarynumber> masking 3 address bits (<hexnumber>0x00000007</hexnumber> mask for address) to <binarynumber>0b11111</binarynumber> masking 31 address bits (<hexnumber>0x7FFFFFFF</hexnumber> mask for address).</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_23_21"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>23</field_msb>
          <field_lsb>21</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="WT_20_20"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>WT</field_name>
          <field_msb>20</field_msb>
          <field_lsb>20</field_lsb>
          <field_description order="before">
          
  <para>Watchpoint type. Possible values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Unlinked data address match.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Linked data address match.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="LBN_19_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LBN</field_name>
          <field_msb>19</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
          
  <para>Linked breakpoint number. For Linked data address watchpoints, this specifies the index of the Context-matching breakpoint linked to.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="SSC_15_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SSC</field_name>
          <field_msb>15</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>Security state control. Determines the Security states under which a Watchpoint debug event for watchpoint n is generated. This field must be interpreted along with the HMC and PAC fields.</para>
<para>For more information on the operation of the SSC, HMC, and PAC fields, see <xref linkend="BCGGCHFB" browsertext="'Execution conditions for which a watchpoint generates Watchpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="HMC_13_13"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>HMC</field_name>
          <field_msb>13</field_msb>
          <field_lsb>13</field_lsb>
          <field_description order="before">
          
  <para>Higher mode control. Determines the debug perspective for deciding when a Watchpoint debug event for watchpoint n is generated. This field must be interpreted along with the SSC and PAC fields.</para>
<para>For more information on the operation of the SSC, HMC, and PAC fields, see <xref linkend="BCGGCHFB" browsertext="'Execution conditions for which a watchpoint generates Watchpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="BAS_12_5"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>BAS</field_name>
          <field_msb>12</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
          
  <para>Byte address select. Each bit of this field selects whether a byte from within the word or double-word addressed by <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> is being watched.</para>
<table><tgroup cols="2"><thead><row><entry>BAS</entry><entry>Description</entry></row></thead><tbody><row><entry>xxxxxxx1</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link></entry></row><row><entry>xxxxxx1x</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 1</entry></row><row><entry>xxxxx1xx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 2</entry></row><row><entry>xxxx1xxx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 3</entry></row></tbody></tgroup></table>
<para>In cases where <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> addresses a double-word:</para>
<table><tgroup cols="2"><thead><row><entry>BAS</entry><entry>Description, if <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link>[2] == 0</entry></row></thead><tbody><row><entry>xxx1xxxx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 4</entry></row><row><entry>xx1xxxxx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 5</entry></row><row><entry>x1xxxxxx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 6</entry></row><row><entry>1xxxxxxx</entry><entry>Match byte at <register_link state="AArch64" id="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link> + 7</entry></row></tbody></tgroup></table>
<para>If <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link>[2] == 1, only BAS[3:0] is used. Arm deprecates setting <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link>[2] == 1.</para>
<para>The valid values for BAS are non-zero binary number all of whose set bits are contiguous. All other values are reserved and must not be used by software. See <xref linkend="BABJCEEE" browsertext="'Reserved DBGWCR&lt;n&gt;.BAS values' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section G2 (AArch32 Self-hosted Debug)" filename="G_aarch32_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="LSC_4_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LSC</field_name>
          <field_msb>4</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
          
  <para>Load/store control. This field enables watchpoint matching on the type of access being made. Possible values of this field are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
  <para>Match instructions that load from a watchpointed address.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
  <para>Match instructions that store to a watchpointed address.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
  <para>Match instructions that load from or store to a watchpointed address.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved, but must behave as if the watchpoint is disabled. Software must not rely on this property as the behavior of reserved values might change in a future revision of the architecture.</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="PAC_2_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PAC</field_name>
          <field_msb>2</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Privilege of access control. Determines the Exception level or levels at which a Watchpoint debug event for watchpoint n is generated. This field must be interpreted along with the SSC and HMC fields.</para>
<para>For more information on the operation of the SSC, HMC, and PAC fields, see <xref linkend="BCGGCHFB" browsertext="'Execution conditions for which a watchpoint generates Watchpoint exceptions' in the Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile, section D2 (AArch64 Self-hosted Debug)" filename="D_aarch64_self_hosted_debug.fm"/>.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="E_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>E</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Enable watchpoint n. Possible values are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Watchpoint disabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Watchpoint enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="0_31_29" msb="31" lsb="29"/>
        <fieldat id="MASK_28_24" msb="28" lsb="24"/>
        <fieldat id="0_23_21" msb="23" lsb="21"/>
        <fieldat id="WT_20_20" msb="20" lsb="20"/>
        <fieldat id="LBN_19_16" msb="19" lsb="16"/>
        <fieldat id="SSC_15_14" msb="15" lsb="14"/>
        <fieldat id="HMC_13_13" msb="13" lsb="13"/>
        <fieldat id="BAS_12_5" msb="12" lsb="5"/>
        <fieldat id="LSC_4_3" msb="4" lsb="3"/>
        <fieldat id="PAC_2_1" msb="2" lsb="1"/>
        <fieldat id="E_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="15"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalDebugAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>