<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ICH_AP1R&lt;n&gt;</reg_short_name>
      <reg_long_name>Interrupt Controller Hyp Active Priorities Group 1 Registers</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>3</reg_array_end>
         </reg_array>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-ich_ap1rn_el2.xml">ICH_AP1R&lt;n&gt;_EL2</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Provides information about Group 1 active priorities for EL2.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC system registers</reg_group>
            <reg_group>GIC host interface control registers</reg_group>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICH_AP1R&lt;n&gt; is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="P&lt;x&gt;_31_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>P&lt;x&gt;</field_name>
          <field_msb>31</field_msb>
          <field_lsb>0</field_lsb>
          <field_array>
            <field_array_start>31</field_array_start>
            <field_array_end>0</field_array_end>
            <field_array_description>x</field_array_description>
          </field_array>
          <field_description order="before">
          
  <para>Group 1 interrupt active priorities. Possible values of each bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>There is no Group 1 interrupt active at the priority corresponding to that bit.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>There is a Group 1 interrupt active at the priority corresponding to that bit.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>The correspondence between priority levels and bits depends on the number of bits of priority that are implemented.</para>
<para>If 5 bits of preemption are implemented (bits [7:3] of priority), then there are 32 preemption levels, and the active state of these preemption levels are held in ICH_AP1R0 in the bits corresponding to Priority[7:3].</para>
<para>If 6 bits of preemption are implemented (bits [7:2] of priority), then there are 64 preemption levels, and:</para>
<list type="unordered">
<listitem><content>The active state of preemption levels 0 - 124 are held in ICH_AP1R0 in the bits corresponding to 0:Priority[6:2].</content>
</listitem><listitem><content>The active state of preemption levels 128 - 252 are held in ICH_AP1R1 in the bits corresponding to 1:Priority[6:2].</content>
</listitem></list>
<para>If 7 bits of preemption are implemented (bits [7:1] of priority), then there are 128 preemption levels, and:</para>
<list type="unordered">
<listitem><content>The active state of preemption levels 0 - 62 are held in ICH_AP1R0 in the bits corresponding to 00:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 64 - 126 are held in ICH_AP1R1 in the bits corresponding to 01:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 128 - 190 are held in ICH_AP1R2 in the bits corresponding to 10:Priority[5:1].</content>
</listitem><listitem><content>The active state of preemption levels 192 - 254 are held in ICH_AP1R3 in the bits corresponding to 11:Priority[5:1].</content>
</listitem></list>
<note><para>Having the bit corresponding to a priority set to 1 in both <register_link state="AArch32" id="AArch32-ich_ap0rn.xml">ICH_AP0R&lt;n&gt;</register_link> and ICH_AP1R&lt;n&gt; might result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior of the interrupt prioritization system for virtual interrupts.</para></note>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_number>0</field_reset_number>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="P&lt;x&gt;_31_0" msb="31" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="3"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>ICH_AP1R1 is only implemented in implementations that support 6 or more bits of preemption. ICH_AP1R2 and ICH_AP1R3 are only implemented in implementations that support 7 bits of preemption. Unimplemented registers are <arm-defined-word>UNDEFINED</arm-defined-word>.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>The number of bits of preemption is indicated by <register_link state="AArch32" id="AArch32-ich_vtr.xml">ICH_VTR</register_link>.PREbits</para></note>
      </access_permission_text>
      <access_permission_text>
        <para>Writing to the active priority registers in any order other than the following order will result in <arm-defined-word>UNPREDICTABLE</arm-defined-word> behavior:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content><register_link state="AArch32" id="AArch32-ich_ap0rn.xml">ICH_AP0R&lt;n&gt;</register_link></content>
</listitem><listitem><content>ICH_AP1R&lt;n&gt;</content>
</listitem></list>
      </access_permission_text>


      <access_mechanism accessor="MRC ICH_AP1R&lt;n&gt;">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="opc2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_HSRE.SRE == '0' then
        UNDEFINED;
    else
        return ICH_AP1R[UInt(opc2&lt;1:0&gt;)];
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        return ICH_AP1R[UInt(opc2&lt;1:0&gt;)];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR ICH_AP1R&lt;n&gt;">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1001"/>
            
            <enc n="opc2" v="0b0:n[1:0]"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_HSRE.SRE == '0' then
        UNDEFINED;
    else
        ICH_AP1R[UInt(opc2&lt;1:0&gt;)] = R[t];
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        ICH_AP1R[UInt(opc2&lt;1:0&gt;)] = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>