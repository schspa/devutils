<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>VDISR</reg_short_name>
      <reg_long_name>Virtual Deferred Interrupt Status Register</reg_long_name>
        <reg_condition otherwise="UNDEFINED">when RAS is implemented</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-vdisr_el2.xml">VDISR_EL2</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Records that an SError interrupt has been consumed by an <instruction>ESB</instruction> instruction.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, then VDISR is <arm-defined-word>RES0</arm-defined-word> from Monitor mode when SCR.NS == 1.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>VDISR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
      <fields_condition>When TTBCR.EAE == 0</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="A_31_31"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>A</field_name>
          <field_msb>31</field_msb>
          <field_lsb>31</field_lsb>
          <field_description order="before">
          
  <para>Set to 1 when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_30_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>30</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="AET_15_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AET</field_name>
          <field_msb>15</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>The value copied from <register_link state="AArch32" id="AArch32-vdfsr.xml">VDFSR</register_link>.AET.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_13_13"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>13</field_msb>
          <field_lsb>13</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ExT_12_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ExT</field_name>
          <field_msb>12</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>The value copied from <register_link state="AArch32" id="AArch32-vdfsr.xml">VDFSR</register_link>.ExT.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_11_11"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>11</field_msb>
          <field_lsb>11</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="FS_10_10"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FS[4]</field_name>
          <field_msb>10</field_msb>
          <field_lsb>10</field_lsb>
          <field_description order="before">
          
  <para>This field is bit[4] of FS[4:0].</para>
<para>Fault status code. Set to <binarynumber>0b10110</binarynumber> when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
                <field_value_name>FS</field_value_name>
                  <field_value_instance>
        <field_value>0b10110</field_value>
        <field_value_description>
  <para>Asynchronous SError interrupt.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>
<para>The FS field is split as follows:</para>
<list type="unordered">
<listitem><content>FS[4] is VDISR[10].</content>
</listitem><listitem><content>FS[3:0] is VDISR[3:0].</content>
</listitem></list>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="LPAE_9_9"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LPAE</field_name>
          <field_msb>9</field_msb>
          <field_lsb>9</field_lsb>
          <field_description order="before">
          
  <para>Format.</para>
<para>Set to <register_link state="AArch32" id="AArch32-ttbcr.xml">TTBCR</register_link>.EAE when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Using the Short-descriptor translation table format.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_8_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>8</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="FS_3_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>FS[3:0]</field_name>
          <field_msb>3</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>This field is bits[3:0] of FS[4:0].</para>
<para>See FS[4] for the field description.</para>

          </field_description>
            <field_values>
               
                 <field_value_name>F</field_value_name>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <fields length="32">
      <fields_condition>When TTBCR.EAE == 1</fields_condition>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="A_31_31"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>A</field_name>
          <field_msb>31</field_msb>
          <field_lsb>31</field_lsb>
          <field_description order="before">
          
  <para>Set to 1 when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_30_16"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>30</field_msb>
          <field_lsb>16</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="AET_15_14"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AET</field_name>
          <field_msb>15</field_msb>
          <field_lsb>14</field_lsb>
          <field_description order="before">
          
  <para>The value copied from <register_link state="AArch32" id="AArch32-vdfsr.xml">VDFSR</register_link>.AET.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_13_13"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>13</field_msb>
          <field_lsb>13</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="ExT_12_12"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>ExT</field_name>
          <field_msb>12</field_msb>
          <field_lsb>12</field_lsb>
          <field_description order="before">
          
  <para>The value copied from <register_link state="AArch32" id="AArch32-vdfsr.xml">VDFSR</register_link>.ExT.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_11_10"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>11</field_msb>
          <field_lsb>10</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="LPAE_9_9"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>LPAE</field_name>
          <field_msb>9</field_msb>
          <field_lsb>9</field_lsb>
          <field_description order="before">
          
  <para>Format.</para>
<para>Set to <register_link state="AArch32" id="AArch32-ttbcr.xml">TTBCR</register_link>.EAE when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Using the Long-descriptor translation table format.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_8_6"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>8</field_msb>
          <field_lsb>6</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="STATUS_5_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>STATUS</field_name>
          <field_msb>5</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Fault status code. Set to <binarynumber>0b010001</binarynumber> when an <instruction>ESB</instruction> instruction defers a virtual SError interrupt.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b010001</field_value>
        <field_value_description>
  <para>Asynchronous SError interrupt.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>All other values are reserved.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
        <fields_condition>When TTBCR.EAE == 0</fields_condition>
      
        <fieldat id="A_31_31" msb="31" lsb="31"/>
        <fieldat id="0_30_16" msb="30" lsb="16"/>
        <fieldat id="AET_15_14" msb="15" lsb="14"/>
        <fieldat id="0_13_13" msb="13" lsb="13"/>
        <fieldat id="ExT_12_12" msb="12" lsb="12"/>
        <fieldat id="0_11_11" msb="11" lsb="11"/>
        <fieldat id="FS_10_10" msb="10" lsb="10"/>
        <fieldat id="LPAE_9_9" msb="9" lsb="9"/>
        <fieldat id="0_8_4" msb="8" lsb="4"/>
        <fieldat id="FS_3_0" msb="3" lsb="0"/>
    </reg_fieldset>
  <reg_fieldset length="32">
        <fields_condition>When TTBCR.EAE == 1</fields_condition>
      
        <fieldat id="A_31_31" msb="31" lsb="31"/>
        <fieldat id="0_30_16" msb="30" lsb="16"/>
        <fieldat id="AET_15_14" msb="15" lsb="14"/>
        <fieldat id="0_13_13" msb="13" lsb="13"/>
        <fieldat id="ExT_12_12" msb="12" lsb="12"/>
        <fieldat id="0_11_10" msb="11" lsb="10"/>
        <fieldat id="LPAE_9_9" msb="9" lsb="9"/>
        <fieldat id="0_8_6" msb="8" lsb="6"/>
        <fieldat id="STATUS_5_0" msb="5" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>Direct reads and writes of VDFSR are <arm-defined-word>UNDEFINED</arm-defined-word> if EL3 is implemented and using AArch32 in all Secure privileged modes other than Monitor mode.</para>

      </access_permission_text>
      <access_permission_text>
        <para>An indirect write to VDISR made by an <instruction>ESB</instruction> instruction does not require an explicit synchronization operation for the value that is written to be observed by a direct read of <register_link state="AArch32" id="AArch32-disr.xml">DISR</register_link> occurring in program order after the <instruction>ESB</instruction> instruction.</para>

      </access_permission_text>
      <access_permission_text>
        <para>If EL2 is not implemented, then VDISR is <arm-defined-word>RES0</arm-defined-word> from Monitor mode when <register_link state="AArch32" id="AArch32-scr.xml">SCR</register_link>.NS == 1.</para>
      </access_permission_text>


      <access_mechanism accessor="MRC VDISR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="opc2" v="0b001"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    return VDISR;
elsif PSTATE.EL == EL3 then
    if SCR.NS == '0' then
        UNDEFINED;
    else
        return VDISR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR VDISR">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="opc2" v="0b001"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    VDISR = R[t];
elsif PSTATE.EL == EL3 then
    if SCR.NS == '0' then
        UNDEFINED;
    else
        VDISR = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MRC DISR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="opc2" v="0b001"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.AMO == '1' then
        return VDISR_EL2;
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.AMO == '1' then
        return VDISR;
    else
        return DISR;
elsif PSTATE.EL == EL2 then
    return DISR;
elsif PSTATE.EL == EL3 then
    return DISR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR DISR">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b000"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b0001"/>
            
            <enc n="opc2" v="0b001"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.AMO == '1' then
        VDISR_EL2 = R[t];
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.AMO == '1' then
        VDISR = R[t];
    else
        DISR = R[t];
elsif PSTATE.EL == EL2 then
    DISR = R[t];
elsif PSTATE.EL == EL3 then
    DISR = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>