<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ICH_VMCR</reg_short_name>
      <reg_long_name>Interrupt Controller Virtual Machine Control Register</reg_long_name>
        <reg_condition otherwise="UNKNOWN">when AArch32 is supported at any Exception level</reg_condition>
      

          <reg_reset_value></reg_reset_value>
      <reg_mappings>
          <reg_mapping>
              
            <mapped_name filename="AArch64-ich_vmcr_el2.xml">ICH_VMCR_EL2</mapped_name>
            <mapped_type>Architectural</mapped_type>
              <mapped_execution_state>AArch64</mapped_execution_state>
              <mapped_from_startbit>31</mapped_from_startbit>
              <mapped_from_endbit>0</mapped_from_endbit>

              <mapped_to_startbit>31</mapped_to_startbit>
              <mapped_to_endbit>0</mapped_to_endbit>

          </reg_mapping>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>Enables the hypervisor to save and restore the virtual machine view of the GIC state.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
            <reg_group>GIC system registers</reg_group>
            <reg_group>GIC host interface control registers</reg_group>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ICH_VMCR is a 32-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="32">
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="VPMR_31_24"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VPMR</field_name>
          <field_msb>31</field_msb>
          <field_lsb>24</field_lsb>
          <field_description order="before">
          
  <para>Virtual Priority Mask. The priority mask level for the virtual CPU interface. If the priority of a pending virtual interrupt is higher than the value indicated by this field, the interface signals the virtual interrupt to the PE.</para>
<para>This field is an alias of <register_link state="AArch32" id="AArch32-icv_pmr.xml">ICV_PMR</register_link>.Priority.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VBPR0_23_21"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VBPR0</field_name>
          <field_msb>23</field_msb>
          <field_lsb>21</field_lsb>
          <field_description order="before">
          
  <para>Virtual Binary Point Register, Group 0. Defines the point at which the priority value fields split into two parts, the group priority field and the subpriority field. The group priority field determines Group 0 interrupt preemption, and also determines Group 1 interrupt preemption if ICH_VMCR.VCBPR == 1.</para>
<para>This field is an alias of <register_link state="AArch32" id="AArch32-icv_bpr0.xml">ICV_BPR0</register_link>.BinaryPoint.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VBPR1_20_18"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VBPR1</field_name>
          <field_msb>20</field_msb>
          <field_lsb>18</field_lsb>
          <field_description order="before">
          
  <para>Virtual Binary Point Register, Group 1. Defines the point at which the priority value fields split into two parts, the group priority field and the subpriority field. The group priority field determines Group 1 interrupt preemption if <register_link state="AArch32" id="AArch32-ich_vmcr.xml">ICH_VMCR</register_link>.VCBPR == 0.</para>
<para>This field is an alias of <register_link state="AArch32" id="AArch32-icv_bpr1.xml">ICV_BPR1</register_link>.BinaryPoint.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_17_10"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>17</field_msb>
          <field_lsb>10</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="VEOIM_9_9"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VEOIM</field_name>
          <field_msb>9</field_msb>
          <field_lsb>9</field_lsb>
          <field_description order="before">
          
  <para>Virtual EOI mode. Controls whether a write to an End of Interrupt register also deactivates the virtual interrupt:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icv_eoir0.xml">ICV_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icv_eoir1.xml">ICV_EOIR1</register_link> provide both priority drop and interrupt deactivation functionality. Accesses to <register_link state="AArch32" id="AArch32-icv_dir.xml">ICV_DIR</register_link> are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icv_eoir0.xml">ICV_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icv_eoir1.xml">ICV_EOIR1</register_link> provide priority drop functionality only. <register_link state="AArch32" id="AArch32-icv_dir.xml">ICV_DIR</register_link> provides interrupt deactivation functionality.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is an alias of <register_link state="AArch32" id="AArch32-icv_ctlr.xml">ICV_CTLR</register_link>.EOImode.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_8_5"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>8</field_msb>
          <field_lsb>5</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="VCBPR_4_4"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VCBPR</field_name>
          <field_msb>4</field_msb>
          <field_lsb>4</field_lsb>
          <field_description order="before">
          
  <para>Virtual Common Binary Point Register. Possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icv_bpr0.xml">ICV_BPR0</register_link> determines the preemption group for virtual Group 0 interrupts only.</para>
<para><register_link state="AArch32" id="AArch32-icv_bpr1.xml">ICV_BPR1</register_link> determines the preemption group for virtual Group 1 interrupts.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para><register_link state="AArch32" id="AArch32-icv_bpr0.xml">ICV_BPR0</register_link> determines the preemption group for both virtual Group 0 and virtual Group 1 interrupts.</para>
<para>Reads of <register_link state="AArch32" id="AArch32-icv_bpr1.xml">ICV_BPR1</register_link> return <register_link state="AArch32" id="AArch32-icv_bpr0.xml">ICV_BPR0</register_link> plus one, saturated to <binarynumber>0b111</binarynumber>. Writes to <register_link state="AArch32" id="AArch32-icv_bpr1.xml">ICV_BPR1</register_link> are ignored.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This field is an alias of <register_link state="AArch32" id="AArch32-icv_ctlr.xml">ICV_CTLR</register_link>.CBPR.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VFIQEn_3_3"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VFIQEn</field_name>
          <field_msb>3</field_msb>
          <field_lsb>3</field_lsb>
          <field_description order="before">
          
  <para>Virtual FIQ enable. Possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Group 0 virtual interrupts are presented as virtual IRQs.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Group 0 virtual interrupts are presented as virtual FIQs.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is an alias of <register_link state="ext" id="ext-gicv_ctlr.xml">GICV_CTLR</register_link>.FIQEn.</para>
<para>In implementations where the Non-secure copy of <register_link state="AArch32" id="AArch32-icc_sre.xml">ICC_SRE</register_link>.SRE is always 1, this bit is <arm-defined-word>RES1</arm-defined-word>.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VAckCtl_2_2"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VAckCtl</field_name>
          <field_msb>2</field_msb>
          <field_lsb>2</field_lsb>
          <field_description order="before">
          
  <para>Virtual AckCtl. Possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>If the highest priority pending interrupt is Group 1, a read of <register_link state="ext" id="ext-gicv_iar.xml">GICV_IAR</register_link> or <register_link state="ext" id="ext-gicv_hppir.xml">GICV_HPPIR</register_link> returns an INTID of 1022.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>If the highest priority pending interrupt is Group 1, a read of <register_link state="ext" id="ext-gicv_iar.xml">GICV_IAR</register_link> or <register_link state="ext" id="ext-gicv_hppir.xml">GICV_HPPIR</register_link> returns the INTID of the corresponding interrupt.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is an alias of <register_link state="ext" id="ext-gicv_ctlr.xml">GICV_CTLR</register_link>.AckCtl.</para>
<para>This field is supported for backwards compatibility with GICv2. Arm deprecates the use of this field.</para>
<para>In implementations where the Non-secure copy of <register_link state="AArch32" id="AArch32-icc_sre.xml">ICC_SRE</register_link>.SRE is always 1, this bit is <arm-defined-word>RES0</arm-defined-word>.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VENG1_1_1"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VENG1</field_name>
          <field_msb>1</field_msb>
          <field_lsb>1</field_lsb>
          <field_description order="before">
          
  <para>Virtual Group 1 interrupt enable. Possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Virtual Group 1 interrupts are disabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Virtual Group 1 interrupts are enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is an alias of <register_link state="AArch32" id="AArch32-icv_igrpen1.xml">ICV_IGRPEN1</register_link>.Enable.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
        <field
           id="VENG0_0_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VENG0</field_name>
          <field_msb>0</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Virtual Group 0 interrupt enable. Possible values of this bit are:</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>Virtual Group 0 interrupts are disabled.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>Virtual Group 0 interrupts are enabled.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>This bit is an alias of <register_link state="AArch32" id="AArch32-icv_igrpen0.xml">ICV_IGRPEN0</register_link>.Enable.</para>

          </field_description>
          <field_resets>
  
  
    
    
        <field_reset>
          
      <field_reset_standard_text>AU</field_reset_standard_text>
  
        </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="32">
      
        <fieldat id="VPMR_31_24" msb="31" lsb="24"/>
        <fieldat id="VBPR0_23_21" msb="23" lsb="21"/>
        <fieldat id="VBPR1_20_18" msb="20" lsb="18"/>
        <fieldat id="0_17_10" msb="17" lsb="10"/>
        <fieldat id="VEOIM_9_9" msb="9" lsb="9"/>
        <fieldat id="0_8_5" msb="8" lsb="5"/>
        <fieldat id="VCBPR_4_4" msb="4" lsb="4"/>
        <fieldat id="VFIQEn_3_3" msb="3" lsb="3"/>
        <fieldat id="VAckCtl_2_2" msb="2" lsb="2"/>
        <fieldat id="VENG1_1_1" msb="1" lsb="1"/>
        <fieldat id="VENG0_0_0" msb="0" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>When EL2 is using System register access, EL1 using either System register or memory-mapped access must be supported.</para>
      </access_permission_text>


      <access_mechanism accessor="MRC ICH_VMCR">
        <encoding>
          
          <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1011"/>
            
            <enc n="opc2" v="0b111"/>
        </encoding>
          <access_permission>
            <ps name="MRC" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_HSRE.SRE == '0' then
        UNDEFINED;
    else
        return ICH_VMCR;
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        return ICH_VMCR;
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
      <access_mechanism accessor="MCR ICH_VMCR">
        <encoding>
          
          <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
            
            <enc n="coproc" v="0b1111"/>
            
            <enc n="opc1" v="0b100"/>
            
            <enc n="CRn" v="0b1100"/>
            
            <enc n="CRm" v="0b1011"/>
            
            <enc n="opc2" v="0b111"/>
        </encoding>
          <access_permission>
            <ps name="MCR" sections="1" secttype="access_permission">
              <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_HSRE.SRE == '0' then
        UNDEFINED;
    else
        ICH_VMCR = R[t];
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        ICH_VMCR = R[t];
              </pstext>
            </ps>
          </access_permission>
      </access_mechanism>
</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>