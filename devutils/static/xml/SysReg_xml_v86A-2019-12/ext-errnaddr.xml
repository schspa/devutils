<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2018 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>






<register_page>
  <registers>
    <register is_register="True" is_internal="False" is_banked="False" is_optional="False" is_stub_entry="False">
      <reg_short_name>ERR&lt;n&gt;ADDR</reg_short_name>
      <reg_long_name>Error Record Address Register</reg_long_name>
        <reg_condition otherwise="RES0">when error record &lt;n&gt; is implemented and the error record includes an address associated with an error</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>65534</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>RAS</reg_component>
    <reg_offset><hexnumber>0x018</hexnumber> + 64n</reg_offset>
    <reg_instance>ERR&lt;n&gt;ADDR</reg_instance>
    <reg_access>
        
        <reg_access_state>
            <reg_access_type>RW</reg_access_type>
        </reg_access_state>
    </reg_access>
</reg_address>

          <reg_reset_value>

      </reg_reset_value>
      <reg_mappings>
      </reg_mappings>
      <reg_purpose>
        
    
      <purpose_text>
        <para>If an address is associated with a detected error, then this must be written to the address register when the error is recorded. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> how the recorded addresses map to the software-visible physical addresses. Software might have to reconstruct the actual physical addresses using the identity of the node and knowledge of the system.</para>
      </purpose_text>

      </reg_purpose>
      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para><register_link id="ext-errnfr.xml" state="ext">ERR&lt;q&gt;FR</register_link> describes the features implemented by the node that owns error record &lt;n&gt;. &lt;q&gt; is the index of the first error record owned by the same node as error record &lt;n&gt;. If the node owns a single record, then q = n.</para>
      </configuration_text>

      </reg_configuration>
      <reg_attributes>
          <attributes_text>
            <para>ERR&lt;n&gt;ADDR is a 64-bit register.</para>
          </attributes_text>
      </reg_attributes>
      <reg_fieldsets>
        





  <fields length="64">
      <fields_instance>ERR&lt;n&gt;ADDR</fields_instance>
    <text_before_fields>
      
  

    </text_before_fields>
    
        <field
           id="NS_63_63"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>NS</field_name>
          <field_msb>63</field_msb>
          <field_lsb>63</field_lsb>
          <field_description order="before">
          
  <para>Non-secure attribute.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The address is Secure.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The address is Non-secure.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Error recovery">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="SI_62_62"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>SI</field_name>
          <field_msb>62</field_msb>
          <field_lsb>62</field_lsb>
          <field_description order="before">
          
  <para>Secure Incorrect. Indicates whether the NS bit is valid.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The NS bit is correct. That is, it matches the programmers' view of the Non-secure attribute for this recorded location.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The NS bit might not be correct, and might not match the programmers' view of the Non-secure attribute for the recorded location.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write.</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Error recovery">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="AI_61_61"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>AI</field_name>
          <field_msb>61</field_msb>
          <field_lsb>61</field_lsb>
          <field_description order="before">
          
  <para>Address Incorrect. Indicates whether the PADDR field is a valid physical address that is known to match the programmers' view of the physical address for the recorded location.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The PADDR field is a valid physical address. That is, it matches the programmers' view of the physical address for the recorded location.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The PADDR field might not be a valid physical address, and might not match the programmers' view of the physical address for the recorded location.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write.</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Error recovery">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="VA_60_60"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>VA</field_name>
          <field_msb>60</field_msb>
          <field_lsb>60</field_lsb>
          <field_description order="before">
          
  <para>Virtual Address. Indicates whether the PADDR field is a virtual address.</para>

          </field_description>
            <field_values>
                  <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
  <para>The PADDR field is not a virtual address.</para>
</field_value_description>
    </field_value_instance>
                  <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
  <para>The PADDR field is a virtual address.</para>
</field_value_description>
    </field_value_instance>
            </field_values>
          <field_description order="after">
            
  <para>No context information is provided for the virtual address. When ERR&lt;n&gt;ADDR.VA == <binarynumber>0b1</binarynumber>, ERR&lt;n&gt;ADDR.{NS,SI,AI} must read as {0,1,1}.</para>
<para>Support for this bit is optional. If this bit is not implemented and the PADDR field is a virtual address, then ERR&lt;n&gt;ADDR.{NS,SI,AI} must read as {0,1,1}.</para>
<para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write.</para>

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Error recovery">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
        <field
           id="0_59_56"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
           rwtype="RES0"
        >
          <field_name>0</field_name>
          <field_msb>59</field_msb>
          <field_lsb>56</field_lsb>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
            <field_values>
            </field_values>
      </field>
        <field
           id="PADDR_55_0"
           is_variable_length="False"
           has_partial_fieldset="False"
           is_linked_to_partial_fieldset="False"
           is_access_restriction_possible="False"
           is_constant_value="False"
           is_partial_field="False"
        >
          <field_name>PADDR</field_name>
          <field_msb>55</field_msb>
          <field_lsb>0</field_lsb>
          <field_description order="before">
          
  <para>Physical Address. Address of the recorded location. If the physical address size implemented by this component is smaller than the size of this field, then high-order bits are unimplemented and either <arm-defined-word>RES0</arm-defined-word> or have a fixed read-only <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> value. Low-order address bits might also be unimplemented and <arm-defined-word>RES0</arm-defined-word>, for example, if the physical address is always aligned to the size of a protection granule.</para>

          </field_description>
            <field_values>
            </field_values>
          <field_description order="after">
            
  

          </field_description>
          <field_resets>
  
  
        
    
      <field_reset reset_type="Error recovery">
        
      <field_reset_standard_text>UC</field_reset_standard_text>
  
      </field_reset>
  
        
    
      <field_reset reset_type="Cold">
        
      <field_reset_standard_text>AU</field_reset_standard_text>
  
      </field_reset>
  
</field_resets>
      </field>
    <text_after_fields>
    
  

    </text_after_fields>
  </fields>
  <reg_fieldset length="64">
      
        <fieldat id="NS_63_63" msb="63" lsb="63"/>
        <fieldat id="SI_62_62" msb="62" lsb="62"/>
        <fieldat id="AI_61_61" msb="61" lsb="61"/>
        <fieldat id="VA_60_60" msb="60" lsb="60"/>
        <fieldat id="0_59_56" msb="59" lsb="56"/>
        <fieldat id="PADDR_55_0" msb="55" lsb="0"/>
    </reg_fieldset>

      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="65534"/>
        </reg_variables>
      


<access_mechanisms>
  
    
      <access_permission_text>
        <para>ERR&lt;n&gt;ADDR ignores writes if <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV == <binarynumber>0b1</binarynumber>.</para>
      </access_permission_text>


</access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>13/12/2019 15:13; 391b5248b29fb2f001ef74792eaacbd6fc72f211</timestamp>
</register_page>